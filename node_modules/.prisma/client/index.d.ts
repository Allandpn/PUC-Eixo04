
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Aluno
 * 
 */
export type Aluno = $Result.DefaultSelection<Prisma.$AlunoPayload>
/**
 * Model Coordenador
 * 
 */
export type Coordenador = $Result.DefaultSelection<Prisma.$CoordenadorPayload>
/**
 * Model TiposDeInstrumento
 * 
 */
export type TiposDeInstrumento = $Result.DefaultSelection<Prisma.$TiposDeInstrumentoPayload>
/**
 * Model Instrumento
 * 
 */
export type Instrumento = $Result.DefaultSelection<Prisma.$InstrumentoPayload>
/**
 * Model EmprestimoInstrumento
 * 
 */
export type EmprestimoInstrumento = $Result.DefaultSelection<Prisma.$EmprestimoInstrumentoPayload>
/**
 * Model Curso
 * 
 */
export type Curso = $Result.DefaultSelection<Prisma.$CursoPayload>
/**
 * Model Turma
 * 
 */
export type Turma = $Result.DefaultSelection<Prisma.$TurmaPayload>
/**
 * Model DiaDaSemana
 * 
 */
export type DiaDaSemana = $Result.DefaultSelection<Prisma.$DiaDaSemanaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.aluno`: Exposes CRUD operations for the **Aluno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alunos
    * const alunos = await prisma.aluno.findMany()
    * ```
    */
  get aluno(): Prisma.AlunoDelegate<ExtArgs>;

  /**
   * `prisma.coordenador`: Exposes CRUD operations for the **Coordenador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coordenadors
    * const coordenadors = await prisma.coordenador.findMany()
    * ```
    */
  get coordenador(): Prisma.CoordenadorDelegate<ExtArgs>;

  /**
   * `prisma.tiposDeInstrumento`: Exposes CRUD operations for the **TiposDeInstrumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TiposDeInstrumentos
    * const tiposDeInstrumentos = await prisma.tiposDeInstrumento.findMany()
    * ```
    */
  get tiposDeInstrumento(): Prisma.TiposDeInstrumentoDelegate<ExtArgs>;

  /**
   * `prisma.instrumento`: Exposes CRUD operations for the **Instrumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instrumentos
    * const instrumentos = await prisma.instrumento.findMany()
    * ```
    */
  get instrumento(): Prisma.InstrumentoDelegate<ExtArgs>;

  /**
   * `prisma.emprestimoInstrumento`: Exposes CRUD operations for the **EmprestimoInstrumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmprestimoInstrumentos
    * const emprestimoInstrumentos = await prisma.emprestimoInstrumento.findMany()
    * ```
    */
  get emprestimoInstrumento(): Prisma.EmprestimoInstrumentoDelegate<ExtArgs>;

  /**
   * `prisma.curso`: Exposes CRUD operations for the **Curso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursos
    * const cursos = await prisma.curso.findMany()
    * ```
    */
  get curso(): Prisma.CursoDelegate<ExtArgs>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **Turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.TurmaDelegate<ExtArgs>;

  /**
   * `prisma.diaDaSemana`: Exposes CRUD operations for the **DiaDaSemana** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiaDaSemanas
    * const diaDaSemanas = await prisma.diaDaSemana.findMany()
    * ```
    */
  get diaDaSemana(): Prisma.DiaDaSemanaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Aluno: 'Aluno',
    Coordenador: 'Coordenador',
    TiposDeInstrumento: 'TiposDeInstrumento',
    Instrumento: 'Instrumento',
    EmprestimoInstrumento: 'EmprestimoInstrumento',
    Curso: 'Curso',
    Turma: 'Turma',
    DiaDaSemana: 'DiaDaSemana'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'admin' | 'aluno' | 'coordenador' | 'tiposDeInstrumento' | 'instrumento' | 'emprestimoInstrumento' | 'curso' | 'turma' | 'diaDaSemana'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Aluno: {
        payload: Prisma.$AlunoPayload<ExtArgs>
        fields: Prisma.AlunoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlunoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlunoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findFirst: {
            args: Prisma.AlunoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlunoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findMany: {
            args: Prisma.AlunoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>[]
          }
          create: {
            args: Prisma.AlunoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          createMany: {
            args: Prisma.AlunoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlunoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          update: {
            args: Prisma.AlunoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          deleteMany: {
            args: Prisma.AlunoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlunoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlunoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          aggregate: {
            args: Prisma.AlunoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAluno>
          }
          groupBy: {
            args: Prisma.AlunoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlunoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlunoCountArgs<ExtArgs>,
            result: $Utils.Optional<AlunoCountAggregateOutputType> | number
          }
        }
      }
      Coordenador: {
        payload: Prisma.$CoordenadorPayload<ExtArgs>
        fields: Prisma.CoordenadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoordenadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoordenadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          findFirst: {
            args: Prisma.CoordenadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoordenadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          findMany: {
            args: Prisma.CoordenadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>[]
          }
          create: {
            args: Prisma.CoordenadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          createMany: {
            args: Prisma.CoordenadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CoordenadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          update: {
            args: Prisma.CoordenadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          deleteMany: {
            args: Prisma.CoordenadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoordenadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoordenadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordenadorPayload>
          }
          aggregate: {
            args: Prisma.CoordenadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoordenador>
          }
          groupBy: {
            args: Prisma.CoordenadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoordenadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoordenadorCountArgs<ExtArgs>,
            result: $Utils.Optional<CoordenadorCountAggregateOutputType> | number
          }
        }
      }
      TiposDeInstrumento: {
        payload: Prisma.$TiposDeInstrumentoPayload<ExtArgs>
        fields: Prisma.TiposDeInstrumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TiposDeInstrumentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TiposDeInstrumentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          findFirst: {
            args: Prisma.TiposDeInstrumentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TiposDeInstrumentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          findMany: {
            args: Prisma.TiposDeInstrumentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>[]
          }
          create: {
            args: Prisma.TiposDeInstrumentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          createMany: {
            args: Prisma.TiposDeInstrumentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TiposDeInstrumentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          update: {
            args: Prisma.TiposDeInstrumentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          deleteMany: {
            args: Prisma.TiposDeInstrumentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TiposDeInstrumentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TiposDeInstrumentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TiposDeInstrumentoPayload>
          }
          aggregate: {
            args: Prisma.TiposDeInstrumentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTiposDeInstrumento>
          }
          groupBy: {
            args: Prisma.TiposDeInstrumentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TiposDeInstrumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TiposDeInstrumentoCountArgs<ExtArgs>,
            result: $Utils.Optional<TiposDeInstrumentoCountAggregateOutputType> | number
          }
        }
      }
      Instrumento: {
        payload: Prisma.$InstrumentoPayload<ExtArgs>
        fields: Prisma.InstrumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstrumentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstrumentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          findFirst: {
            args: Prisma.InstrumentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstrumentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          findMany: {
            args: Prisma.InstrumentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>[]
          }
          create: {
            args: Prisma.InstrumentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          createMany: {
            args: Prisma.InstrumentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InstrumentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          update: {
            args: Prisma.InstrumentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          deleteMany: {
            args: Prisma.InstrumentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InstrumentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InstrumentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrumentoPayload>
          }
          aggregate: {
            args: Prisma.InstrumentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstrumento>
          }
          groupBy: {
            args: Prisma.InstrumentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstrumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstrumentoCountArgs<ExtArgs>,
            result: $Utils.Optional<InstrumentoCountAggregateOutputType> | number
          }
        }
      }
      EmprestimoInstrumento: {
        payload: Prisma.$EmprestimoInstrumentoPayload<ExtArgs>
        fields: Prisma.EmprestimoInstrumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmprestimoInstrumentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmprestimoInstrumentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          findFirst: {
            args: Prisma.EmprestimoInstrumentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmprestimoInstrumentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          findMany: {
            args: Prisma.EmprestimoInstrumentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>[]
          }
          create: {
            args: Prisma.EmprestimoInstrumentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          createMany: {
            args: Prisma.EmprestimoInstrumentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmprestimoInstrumentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          update: {
            args: Prisma.EmprestimoInstrumentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          deleteMany: {
            args: Prisma.EmprestimoInstrumentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmprestimoInstrumentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmprestimoInstrumentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmprestimoInstrumentoPayload>
          }
          aggregate: {
            args: Prisma.EmprestimoInstrumentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmprestimoInstrumento>
          }
          groupBy: {
            args: Prisma.EmprestimoInstrumentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmprestimoInstrumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmprestimoInstrumentoCountArgs<ExtArgs>,
            result: $Utils.Optional<EmprestimoInstrumentoCountAggregateOutputType> | number
          }
        }
      }
      Curso: {
        payload: Prisma.$CursoPayload<ExtArgs>
        fields: Prisma.CursoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CursoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CursoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findFirst: {
            args: Prisma.CursoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CursoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findMany: {
            args: Prisma.CursoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>[]
          }
          create: {
            args: Prisma.CursoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          createMany: {
            args: Prisma.CursoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CursoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          update: {
            args: Prisma.CursoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          deleteMany: {
            args: Prisma.CursoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CursoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CursoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          aggregate: {
            args: Prisma.CursoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCurso>
          }
          groupBy: {
            args: Prisma.CursoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CursoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CursoCountArgs<ExtArgs>,
            result: $Utils.Optional<CursoCountAggregateOutputType> | number
          }
        }
      }
      Turma: {
        payload: Prisma.$TurmaPayload<ExtArgs>
        fields: Prisma.TurmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findFirst: {
            args: Prisma.TurmaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findMany: {
            args: Prisma.TurmaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          create: {
            args: Prisma.TurmaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          createMany: {
            args: Prisma.TurmaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TurmaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          update: {
            args: Prisma.TurmaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          deleteMany: {
            args: Prisma.TurmaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TurmaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          aggregate: {
            args: Prisma.TurmaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTurma>
          }
          groupBy: {
            args: Prisma.TurmaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaCountArgs<ExtArgs>,
            result: $Utils.Optional<TurmaCountAggregateOutputType> | number
          }
        }
      }
      DiaDaSemana: {
        payload: Prisma.$DiaDaSemanaPayload<ExtArgs>
        fields: Prisma.DiaDaSemanaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiaDaSemanaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiaDaSemanaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          findFirst: {
            args: Prisma.DiaDaSemanaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiaDaSemanaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          findMany: {
            args: Prisma.DiaDaSemanaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>[]
          }
          create: {
            args: Prisma.DiaDaSemanaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          createMany: {
            args: Prisma.DiaDaSemanaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DiaDaSemanaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          update: {
            args: Prisma.DiaDaSemanaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          deleteMany: {
            args: Prisma.DiaDaSemanaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DiaDaSemanaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DiaDaSemanaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiaDaSemanaPayload>
          }
          aggregate: {
            args: Prisma.DiaDaSemanaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDiaDaSemana>
          }
          groupBy: {
            args: Prisma.DiaDaSemanaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DiaDaSemanaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiaDaSemanaCountArgs<ExtArgs>,
            result: $Utils.Optional<DiaDaSemanaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AlunoCountOutputType
   */

  export type AlunoCountOutputType = {
    instrumentoEmprestimo: number
  }

  export type AlunoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentoEmprestimo?: boolean | AlunoCountOutputTypeCountInstrumentoEmprestimoArgs
  }

  // Custom InputTypes

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlunoCountOutputType
     */
    select?: AlunoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountInstrumentoEmprestimoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmprestimoInstrumentoWhereInput
  }



  /**
   * Count Type CoordenadorCountOutputType
   */

  export type CoordenadorCountOutputType = {
    instrumentosLeciona: number
  }

  export type CoordenadorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentosLeciona?: boolean | CoordenadorCountOutputTypeCountInstrumentosLecionaArgs
  }

  // Custom InputTypes

  /**
   * CoordenadorCountOutputType without action
   */
  export type CoordenadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordenadorCountOutputType
     */
    select?: CoordenadorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CoordenadorCountOutputType without action
   */
  export type CoordenadorCountOutputTypeCountInstrumentosLecionaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TiposDeInstrumentoWhereInput
  }



  /**
   * Count Type InstrumentoCountOutputType
   */

  export type InstrumentoCountOutputType = {
    alunosEmprestimo: number
  }

  export type InstrumentoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    alunosEmprestimo?: boolean | InstrumentoCountOutputTypeCountAlunosEmprestimoArgs
  }

  // Custom InputTypes

  /**
   * InstrumentoCountOutputType without action
   */
  export type InstrumentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstrumentoCountOutputType
     */
    select?: InstrumentoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InstrumentoCountOutputType without action
   */
  export type InstrumentoCountOutputTypeCountAlunosEmprestimoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmprestimoInstrumentoWhereInput
  }



  /**
   * Count Type CursoCountOutputType
   */

  export type CursoCountOutputType = {
    instrumentosCurso: number
  }

  export type CursoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentosCurso?: boolean | CursoCountOutputTypeCountInstrumentosCursoArgs
  }

  // Custom InputTypes

  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoCountOutputType
     */
    select?: CursoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeCountInstrumentosCursoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TiposDeInstrumentoWhereInput
  }



  /**
   * Count Type TurmaCountOutputType
   */

  export type TurmaCountOutputType = {
    diaDaSemana: number
  }

  export type TurmaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    diaDaSemana?: boolean | TurmaCountOutputTypeCountDiaDaSemanaArgs
  }

  // Custom InputTypes

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaCountOutputType
     */
    select?: TurmaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountDiaDaSemanaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DiaDaSemanaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    created_at: Date | null
    updated_at: Date | null
    senha: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    created_at: Date | null
    updated_at: Date | null
    senha: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    dataNascimento: number
    created_at: number
    updated_at: number
    senha: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
    senha?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
    senha?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
    senha?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    nome: string
    email: string
    telefone: string
    dataNascimento: Date
    created_at: Date
    updated_at: Date
    senha: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    created_at?: boolean
    updated_at?: boolean
    senha?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    created_at?: boolean
    updated_at?: boolean
    senha?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      nome: string
      email: string
      telefone: string
      dataNascimento: Date
      created_at: Date
      updated_at: Date
      senha: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly nome: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly telefone: FieldRef<"Admin", 'String'>
    readonly dataNascimento: FieldRef<"Admin", 'DateTime'>
    readonly created_at: FieldRef<"Admin", 'DateTime'>
    readonly updated_at: FieldRef<"Admin", 'DateTime'>
    readonly senha: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }



  /**
   * Model Aluno
   */

  export type AggregateAluno = {
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  export type AlunoAvgAggregateOutputType = {
    id: number | null
  }

  export type AlunoSumAggregateOutputType = {
    id: number | null
  }

  export type AlunoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AlunoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AlunoCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    dataNascimento: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AlunoAvgAggregateInputType = {
    id?: true
  }

  export type AlunoSumAggregateInputType = {
    id?: true
  }

  export type AlunoMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
  }

  export type AlunoMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
  }

  export type AlunoCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AlunoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aluno to aggregate.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alunos
    **/
    _count?: true | AlunoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlunoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlunoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlunoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlunoMaxAggregateInputType
  }

  export type GetAlunoAggregateType<T extends AlunoAggregateArgs> = {
        [P in keyof T & keyof AggregateAluno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluno[P]>
      : GetScalarType<T[P], AggregateAluno[P]>
  }




  export type AlunoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AlunoWhereInput
    orderBy?: AlunoOrderByWithAggregationInput | AlunoOrderByWithAggregationInput[]
    by: AlunoScalarFieldEnum[] | AlunoScalarFieldEnum
    having?: AlunoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlunoCountAggregateInputType | true
    _avg?: AlunoAvgAggregateInputType
    _sum?: AlunoSumAggregateInputType
    _min?: AlunoMinAggregateInputType
    _max?: AlunoMaxAggregateInputType
  }

  export type AlunoGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date
    created_at: Date
    updated_at: Date
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  type GetAlunoGroupByPayload<T extends AlunoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlunoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlunoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlunoGroupByOutputType[P]>
            : GetScalarType<T[P], AlunoGroupByOutputType[P]>
        }
      >
    >


  export type AlunoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    created_at?: boolean
    updated_at?: boolean
    instrumentoEmprestimo?: boolean | Aluno$instrumentoEmprestimoArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aluno"]>

  export type AlunoSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AlunoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentoEmprestimo?: boolean | Aluno$instrumentoEmprestimoArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlunoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Aluno"
    objects: {
      instrumentoEmprestimo: Prisma.$EmprestimoInstrumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nome: string
      email: string
      telefone: string
      dataNascimento: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["aluno"]>
    composites: {}
  }


  type AlunoGetPayload<S extends boolean | null | undefined | AlunoDefaultArgs> = $Result.GetResult<Prisma.$AlunoPayload, S>

  type AlunoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AlunoFindManyArgs, 'select' | 'include'> & {
      select?: AlunoCountAggregateInputType | true
    }

  export interface AlunoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aluno'], meta: { name: 'Aluno' } }
    /**
     * Find zero or one Aluno that matches the filter.
     * @param {AlunoFindUniqueArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlunoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoFindUniqueArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aluno that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlunoFindUniqueOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlunoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aluno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlunoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindFirstArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aluno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlunoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alunos
     * const alunos = await prisma.aluno.findMany()
     * 
     * // Get first 10 Alunos
     * const alunos = await prisma.aluno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alunoWithIdOnly = await prisma.aluno.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlunoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aluno.
     * @param {AlunoCreateArgs} args - Arguments to create a Aluno.
     * @example
     * // Create one Aluno
     * const Aluno = await prisma.aluno.create({
     *   data: {
     *     // ... data to create a Aluno
     *   }
     * })
     * 
    **/
    create<T extends AlunoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoCreateArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Alunos.
     *     @param {AlunoCreateManyArgs} args - Arguments to create many Alunos.
     *     @example
     *     // Create many Alunos
     *     const aluno = await prisma.aluno.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlunoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aluno.
     * @param {AlunoDeleteArgs} args - Arguments to delete one Aluno.
     * @example
     * // Delete one Aluno
     * const Aluno = await prisma.aluno.delete({
     *   where: {
     *     // ... filter to delete one Aluno
     *   }
     * })
     * 
    **/
    delete<T extends AlunoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoDeleteArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aluno.
     * @param {AlunoUpdateArgs} args - Arguments to update one Aluno.
     * @example
     * // Update one Aluno
     * const aluno = await prisma.aluno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlunoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpdateArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Alunos.
     * @param {AlunoDeleteManyArgs} args - Arguments to filter Alunos to delete.
     * @example
     * // Delete a few Alunos
     * const { count } = await prisma.aluno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlunoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alunos
     * const aluno = await prisma.aluno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlunoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluno.
     * @param {AlunoUpsertArgs} args - Arguments to update or create a Aluno.
     * @example
     * // Update or create a Aluno
     * const aluno = await prisma.aluno.upsert({
     *   create: {
     *     // ... data to create a Aluno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluno we want to update
     *   }
     * })
    **/
    upsert<T extends AlunoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpsertArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoCountArgs} args - Arguments to filter Alunos to count.
     * @example
     * // Count the number of Alunos
     * const count = await prisma.aluno.count({
     *   where: {
     *     // ... the filter for the Alunos we want to count
     *   }
     * })
    **/
    count<T extends AlunoCountArgs>(
      args?: Subset<T, AlunoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlunoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlunoAggregateArgs>(args: Subset<T, AlunoAggregateArgs>): Prisma.PrismaPromise<GetAlunoAggregateType<T>>

    /**
     * Group by Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlunoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlunoGroupByArgs['orderBy'] }
        : { orderBy?: AlunoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aluno model
   */
  readonly fields: AlunoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aluno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlunoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instrumentoEmprestimo<T extends Aluno$instrumentoEmprestimoArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$instrumentoEmprestimoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aluno model
   */ 
  interface AlunoFieldRefs {
    readonly id: FieldRef<"Aluno", 'Int'>
    readonly nome: FieldRef<"Aluno", 'String'>
    readonly email: FieldRef<"Aluno", 'String'>
    readonly telefone: FieldRef<"Aluno", 'String'>
    readonly dataNascimento: FieldRef<"Aluno", 'DateTime'>
    readonly created_at: FieldRef<"Aluno", 'DateTime'>
    readonly updated_at: FieldRef<"Aluno", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Aluno findUnique
   */
  export type AlunoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno findUniqueOrThrow
   */
  export type AlunoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno findFirst
   */
  export type AlunoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno findFirstOrThrow
   */
  export type AlunoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno findMany
   */
  export type AlunoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Alunos to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno create
   */
  export type AlunoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to create a Aluno.
     */
    data: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
  }


  /**
   * Aluno createMany
   */
  export type AlunoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alunos.
     */
    data: AlunoCreateManyInput | AlunoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Aluno update
   */
  export type AlunoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to update a Aluno.
     */
    data: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
    /**
     * Choose, which Aluno to update.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno updateMany
   */
  export type AlunoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alunos.
     */
    data: XOR<AlunoUpdateManyMutationInput, AlunoUncheckedUpdateManyInput>
    /**
     * Filter which Alunos to update
     */
    where?: AlunoWhereInput
  }


  /**
   * Aluno upsert
   */
  export type AlunoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The filter to search for the Aluno to update in case it exists.
     */
    where: AlunoWhereUniqueInput
    /**
     * In case the Aluno found by the `where` argument doesn't exist, create a new Aluno with this data.
     */
    create: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
    /**
     * In case the Aluno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
  }


  /**
   * Aluno delete
   */
  export type AlunoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter which Aluno to delete.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno deleteMany
   */
  export type AlunoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alunos to delete
     */
    where?: AlunoWhereInput
  }


  /**
   * Aluno.instrumentoEmprestimo
   */
  export type Aluno$instrumentoEmprestimoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    where?: EmprestimoInstrumentoWhereInput
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmprestimoInstrumentoScalarFieldEnum | EmprestimoInstrumentoScalarFieldEnum[]
  }


  /**
   * Aluno without action
   */
  export type AlunoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
  }



  /**
   * Model Coordenador
   */

  export type AggregateCoordenador = {
    _count: CoordenadorCountAggregateOutputType | null
    _avg: CoordenadorAvgAggregateOutputType | null
    _sum: CoordenadorSumAggregateOutputType | null
    _min: CoordenadorMinAggregateOutputType | null
    _max: CoordenadorMaxAggregateOutputType | null
  }

  export type CoordenadorAvgAggregateOutputType = {
    id: number | null
    salario: Decimal | null
  }

  export type CoordenadorSumAggregateOutputType = {
    id: number | null
    salario: Decimal | null
  }

  export type CoordenadorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    salario: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoordenadorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    salario: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoordenadorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    dataNascimento: number
    salario: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CoordenadorAvgAggregateInputType = {
    id?: true
    salario?: true
  }

  export type CoordenadorSumAggregateInputType = {
    id?: true
    salario?: true
  }

  export type CoordenadorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    salario?: true
    created_at?: true
    updated_at?: true
  }

  export type CoordenadorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    salario?: true
    created_at?: true
    updated_at?: true
  }

  export type CoordenadorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    salario?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CoordenadorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordenador to aggregate.
     */
    where?: CoordenadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordenadors to fetch.
     */
    orderBy?: CoordenadorOrderByWithRelationInput | CoordenadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoordenadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordenadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordenadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coordenadors
    **/
    _count?: true | CoordenadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoordenadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoordenadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoordenadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoordenadorMaxAggregateInputType
  }

  export type GetCoordenadorAggregateType<T extends CoordenadorAggregateArgs> = {
        [P in keyof T & keyof AggregateCoordenador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoordenador[P]>
      : GetScalarType<T[P], AggregateCoordenador[P]>
  }




  export type CoordenadorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CoordenadorWhereInput
    orderBy?: CoordenadorOrderByWithAggregationInput | CoordenadorOrderByWithAggregationInput[]
    by: CoordenadorScalarFieldEnum[] | CoordenadorScalarFieldEnum
    having?: CoordenadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoordenadorCountAggregateInputType | true
    _avg?: CoordenadorAvgAggregateInputType
    _sum?: CoordenadorSumAggregateInputType
    _min?: CoordenadorMinAggregateInputType
    _max?: CoordenadorMaxAggregateInputType
  }

  export type CoordenadorGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date
    salario: Decimal | null
    created_at: Date
    updated_at: Date
    _count: CoordenadorCountAggregateOutputType | null
    _avg: CoordenadorAvgAggregateOutputType | null
    _sum: CoordenadorSumAggregateOutputType | null
    _min: CoordenadorMinAggregateOutputType | null
    _max: CoordenadorMaxAggregateOutputType | null
  }

  type GetCoordenadorGroupByPayload<T extends CoordenadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoordenadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoordenadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoordenadorGroupByOutputType[P]>
            : GetScalarType<T[P], CoordenadorGroupByOutputType[P]>
        }
      >
    >


  export type CoordenadorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    salario?: boolean
    created_at?: boolean
    updated_at?: boolean
    instrumentosLeciona?: boolean | Coordenador$instrumentosLecionaArgs<ExtArgs>
    _count?: boolean | CoordenadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coordenador"]>

  export type CoordenadorSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    salario?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CoordenadorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentosLeciona?: boolean | Coordenador$instrumentosLecionaArgs<ExtArgs>
    _count?: boolean | CoordenadorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoordenadorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Coordenador"
    objects: {
      instrumentosLeciona: Prisma.$TiposDeInstrumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nome: string
      email: string
      telefone: string
      dataNascimento: Date
      salario: Prisma.Decimal | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["coordenador"]>
    composites: {}
  }


  type CoordenadorGetPayload<S extends boolean | null | undefined | CoordenadorDefaultArgs> = $Result.GetResult<Prisma.$CoordenadorPayload, S>

  type CoordenadorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CoordenadorFindManyArgs, 'select' | 'include'> & {
      select?: CoordenadorCountAggregateInputType | true
    }

  export interface CoordenadorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coordenador'], meta: { name: 'Coordenador' } }
    /**
     * Find zero or one Coordenador that matches the filter.
     * @param {CoordenadorFindUniqueArgs} args - Arguments to find a Coordenador
     * @example
     * // Get one Coordenador
     * const coordenador = await prisma.coordenador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoordenadorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorFindUniqueArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coordenador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CoordenadorFindUniqueOrThrowArgs} args - Arguments to find a Coordenador
     * @example
     * // Get one Coordenador
     * const coordenador = await prisma.coordenador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoordenadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coordenador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorFindFirstArgs} args - Arguments to find a Coordenador
     * @example
     * // Get one Coordenador
     * const coordenador = await prisma.coordenador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoordenadorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorFindFirstArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coordenador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorFindFirstOrThrowArgs} args - Arguments to find a Coordenador
     * @example
     * // Get one Coordenador
     * const coordenador = await prisma.coordenador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoordenadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coordenadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coordenadors
     * const coordenadors = await prisma.coordenador.findMany()
     * 
     * // Get first 10 Coordenadors
     * const coordenadors = await prisma.coordenador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coordenadorWithIdOnly = await prisma.coordenador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoordenadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coordenador.
     * @param {CoordenadorCreateArgs} args - Arguments to create a Coordenador.
     * @example
     * // Create one Coordenador
     * const Coordenador = await prisma.coordenador.create({
     *   data: {
     *     // ... data to create a Coordenador
     *   }
     * })
     * 
    **/
    create<T extends CoordenadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorCreateArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Coordenadors.
     *     @param {CoordenadorCreateManyArgs} args - Arguments to create many Coordenadors.
     *     @example
     *     // Create many Coordenadors
     *     const coordenador = await prisma.coordenador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CoordenadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Coordenador.
     * @param {CoordenadorDeleteArgs} args - Arguments to delete one Coordenador.
     * @example
     * // Delete one Coordenador
     * const Coordenador = await prisma.coordenador.delete({
     *   where: {
     *     // ... filter to delete one Coordenador
     *   }
     * })
     * 
    **/
    delete<T extends CoordenadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorDeleteArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coordenador.
     * @param {CoordenadorUpdateArgs} args - Arguments to update one Coordenador.
     * @example
     * // Update one Coordenador
     * const coordenador = await prisma.coordenador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoordenadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorUpdateArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coordenadors.
     * @param {CoordenadorDeleteManyArgs} args - Arguments to filter Coordenadors to delete.
     * @example
     * // Delete a few Coordenadors
     * const { count } = await prisma.coordenador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoordenadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordenadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coordenadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coordenadors
     * const coordenador = await prisma.coordenador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoordenadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coordenador.
     * @param {CoordenadorUpsertArgs} args - Arguments to update or create a Coordenador.
     * @example
     * // Update or create a Coordenador
     * const coordenador = await prisma.coordenador.upsert({
     *   create: {
     *     // ... data to create a Coordenador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coordenador we want to update
     *   }
     * })
    **/
    upsert<T extends CoordenadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoordenadorUpsertArgs<ExtArgs>>
    ): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coordenadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorCountArgs} args - Arguments to filter Coordenadors to count.
     * @example
     * // Count the number of Coordenadors
     * const count = await prisma.coordenador.count({
     *   where: {
     *     // ... the filter for the Coordenadors we want to count
     *   }
     * })
    **/
    count<T extends CoordenadorCountArgs>(
      args?: Subset<T, CoordenadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoordenadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coordenador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoordenadorAggregateArgs>(args: Subset<T, CoordenadorAggregateArgs>): Prisma.PrismaPromise<GetCoordenadorAggregateType<T>>

    /**
     * Group by Coordenador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordenadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoordenadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoordenadorGroupByArgs['orderBy'] }
        : { orderBy?: CoordenadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoordenadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoordenadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coordenador model
   */
  readonly fields: CoordenadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coordenador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoordenadorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instrumentosLeciona<T extends Coordenador$instrumentosLecionaArgs<ExtArgs> = {}>(args?: Subset<T, Coordenador$instrumentosLecionaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coordenador model
   */ 
  interface CoordenadorFieldRefs {
    readonly id: FieldRef<"Coordenador", 'Int'>
    readonly nome: FieldRef<"Coordenador", 'String'>
    readonly email: FieldRef<"Coordenador", 'String'>
    readonly telefone: FieldRef<"Coordenador", 'String'>
    readonly dataNascimento: FieldRef<"Coordenador", 'DateTime'>
    readonly salario: FieldRef<"Coordenador", 'Decimal'>
    readonly created_at: FieldRef<"Coordenador", 'DateTime'>
    readonly updated_at: FieldRef<"Coordenador", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Coordenador findUnique
   */
  export type CoordenadorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordenador to fetch.
     */
    where: CoordenadorWhereUniqueInput
  }


  /**
   * Coordenador findUniqueOrThrow
   */
  export type CoordenadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordenador to fetch.
     */
    where: CoordenadorWhereUniqueInput
  }


  /**
   * Coordenador findFirst
   */
  export type CoordenadorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordenador to fetch.
     */
    where?: CoordenadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordenadors to fetch.
     */
    orderBy?: CoordenadorOrderByWithRelationInput | CoordenadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordenadors.
     */
    cursor?: CoordenadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordenadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordenadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordenadors.
     */
    distinct?: CoordenadorScalarFieldEnum | CoordenadorScalarFieldEnum[]
  }


  /**
   * Coordenador findFirstOrThrow
   */
  export type CoordenadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordenador to fetch.
     */
    where?: CoordenadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordenadors to fetch.
     */
    orderBy?: CoordenadorOrderByWithRelationInput | CoordenadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordenadors.
     */
    cursor?: CoordenadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordenadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordenadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordenadors.
     */
    distinct?: CoordenadorScalarFieldEnum | CoordenadorScalarFieldEnum[]
  }


  /**
   * Coordenador findMany
   */
  export type CoordenadorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordenadors to fetch.
     */
    where?: CoordenadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordenadors to fetch.
     */
    orderBy?: CoordenadorOrderByWithRelationInput | CoordenadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coordenadors.
     */
    cursor?: CoordenadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordenadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordenadors.
     */
    skip?: number
    distinct?: CoordenadorScalarFieldEnum | CoordenadorScalarFieldEnum[]
  }


  /**
   * Coordenador create
   */
  export type CoordenadorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Coordenador.
     */
    data: XOR<CoordenadorCreateInput, CoordenadorUncheckedCreateInput>
  }


  /**
   * Coordenador createMany
   */
  export type CoordenadorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coordenadors.
     */
    data: CoordenadorCreateManyInput | CoordenadorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Coordenador update
   */
  export type CoordenadorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Coordenador.
     */
    data: XOR<CoordenadorUpdateInput, CoordenadorUncheckedUpdateInput>
    /**
     * Choose, which Coordenador to update.
     */
    where: CoordenadorWhereUniqueInput
  }


  /**
   * Coordenador updateMany
   */
  export type CoordenadorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coordenadors.
     */
    data: XOR<CoordenadorUpdateManyMutationInput, CoordenadorUncheckedUpdateManyInput>
    /**
     * Filter which Coordenadors to update
     */
    where?: CoordenadorWhereInput
  }


  /**
   * Coordenador upsert
   */
  export type CoordenadorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Coordenador to update in case it exists.
     */
    where: CoordenadorWhereUniqueInput
    /**
     * In case the Coordenador found by the `where` argument doesn't exist, create a new Coordenador with this data.
     */
    create: XOR<CoordenadorCreateInput, CoordenadorUncheckedCreateInput>
    /**
     * In case the Coordenador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoordenadorUpdateInput, CoordenadorUncheckedUpdateInput>
  }


  /**
   * Coordenador delete
   */
  export type CoordenadorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
    /**
     * Filter which Coordenador to delete.
     */
    where: CoordenadorWhereUniqueInput
  }


  /**
   * Coordenador deleteMany
   */
  export type CoordenadorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordenadors to delete
     */
    where?: CoordenadorWhereInput
  }


  /**
   * Coordenador.instrumentosLeciona
   */
  export type Coordenador$instrumentosLecionaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    where?: TiposDeInstrumentoWhereInput
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    cursor?: TiposDeInstrumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TiposDeInstrumentoScalarFieldEnum | TiposDeInstrumentoScalarFieldEnum[]
  }


  /**
   * Coordenador without action
   */
  export type CoordenadorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordenador
     */
    select?: CoordenadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordenadorInclude<ExtArgs> | null
  }



  /**
   * Model TiposDeInstrumento
   */

  export type AggregateTiposDeInstrumento = {
    _count: TiposDeInstrumentoCountAggregateOutputType | null
    _avg: TiposDeInstrumentoAvgAggregateOutputType | null
    _sum: TiposDeInstrumentoSumAggregateOutputType | null
    _min: TiposDeInstrumentoMinAggregateOutputType | null
    _max: TiposDeInstrumentoMaxAggregateOutputType | null
  }

  export type TiposDeInstrumentoAvgAggregateOutputType = {
    coordenadorId: number | null
    cursoId: number | null
  }

  export type TiposDeInstrumentoSumAggregateOutputType = {
    coordenadorId: number | null
    cursoId: number | null
  }

  export type TiposDeInstrumentoMinAggregateOutputType = {
    nomeInstrumento: string | null
    coordenadorId: number | null
    cursoId: number | null
  }

  export type TiposDeInstrumentoMaxAggregateOutputType = {
    nomeInstrumento: string | null
    coordenadorId: number | null
    cursoId: number | null
  }

  export type TiposDeInstrumentoCountAggregateOutputType = {
    nomeInstrumento: number
    coordenadorId: number
    cursoId: number
    _all: number
  }


  export type TiposDeInstrumentoAvgAggregateInputType = {
    coordenadorId?: true
    cursoId?: true
  }

  export type TiposDeInstrumentoSumAggregateInputType = {
    coordenadorId?: true
    cursoId?: true
  }

  export type TiposDeInstrumentoMinAggregateInputType = {
    nomeInstrumento?: true
    coordenadorId?: true
    cursoId?: true
  }

  export type TiposDeInstrumentoMaxAggregateInputType = {
    nomeInstrumento?: true
    coordenadorId?: true
    cursoId?: true
  }

  export type TiposDeInstrumentoCountAggregateInputType = {
    nomeInstrumento?: true
    coordenadorId?: true
    cursoId?: true
    _all?: true
  }

  export type TiposDeInstrumentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TiposDeInstrumento to aggregate.
     */
    where?: TiposDeInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeInstrumentos to fetch.
     */
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TiposDeInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TiposDeInstrumentos
    **/
    _count?: true | TiposDeInstrumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TiposDeInstrumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TiposDeInstrumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TiposDeInstrumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TiposDeInstrumentoMaxAggregateInputType
  }

  export type GetTiposDeInstrumentoAggregateType<T extends TiposDeInstrumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateTiposDeInstrumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTiposDeInstrumento[P]>
      : GetScalarType<T[P], AggregateTiposDeInstrumento[P]>
  }




  export type TiposDeInstrumentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TiposDeInstrumentoWhereInput
    orderBy?: TiposDeInstrumentoOrderByWithAggregationInput | TiposDeInstrumentoOrderByWithAggregationInput[]
    by: TiposDeInstrumentoScalarFieldEnum[] | TiposDeInstrumentoScalarFieldEnum
    having?: TiposDeInstrumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TiposDeInstrumentoCountAggregateInputType | true
    _avg?: TiposDeInstrumentoAvgAggregateInputType
    _sum?: TiposDeInstrumentoSumAggregateInputType
    _min?: TiposDeInstrumentoMinAggregateInputType
    _max?: TiposDeInstrumentoMaxAggregateInputType
  }

  export type TiposDeInstrumentoGroupByOutputType = {
    nomeInstrumento: string
    coordenadorId: number
    cursoId: number
    _count: TiposDeInstrumentoCountAggregateOutputType | null
    _avg: TiposDeInstrumentoAvgAggregateOutputType | null
    _sum: TiposDeInstrumentoSumAggregateOutputType | null
    _min: TiposDeInstrumentoMinAggregateOutputType | null
    _max: TiposDeInstrumentoMaxAggregateOutputType | null
  }

  type GetTiposDeInstrumentoGroupByPayload<T extends TiposDeInstrumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TiposDeInstrumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TiposDeInstrumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TiposDeInstrumentoGroupByOutputType[P]>
            : GetScalarType<T[P], TiposDeInstrumentoGroupByOutputType[P]>
        }
      >
    >


  export type TiposDeInstrumentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nomeInstrumento?: boolean
    coordenadorId?: boolean
    cursoId?: boolean
    coordenador?: boolean | CoordenadorDefaultArgs<ExtArgs>
    curso?: boolean | CursoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tiposDeInstrumento"]>

  export type TiposDeInstrumentoSelectScalar = {
    nomeInstrumento?: boolean
    coordenadorId?: boolean
    cursoId?: boolean
  }

  export type TiposDeInstrumentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    coordenador?: boolean | CoordenadorDefaultArgs<ExtArgs>
    curso?: boolean | CursoDefaultArgs<ExtArgs>
  }


  export type $TiposDeInstrumentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "TiposDeInstrumento"
    objects: {
      coordenador: Prisma.$CoordenadorPayload<ExtArgs>
      curso: Prisma.$CursoPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      nomeInstrumento: string
      coordenadorId: number
      cursoId: number
    }, ExtArgs["result"]["tiposDeInstrumento"]>
    composites: {}
  }


  type TiposDeInstrumentoGetPayload<S extends boolean | null | undefined | TiposDeInstrumentoDefaultArgs> = $Result.GetResult<Prisma.$TiposDeInstrumentoPayload, S>

  type TiposDeInstrumentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TiposDeInstrumentoFindManyArgs, 'select' | 'include'> & {
      select?: TiposDeInstrumentoCountAggregateInputType | true
    }

  export interface TiposDeInstrumentoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TiposDeInstrumento'], meta: { name: 'TiposDeInstrumento' } }
    /**
     * Find zero or one TiposDeInstrumento that matches the filter.
     * @param {TiposDeInstrumentoFindUniqueArgs} args - Arguments to find a TiposDeInstrumento
     * @example
     * // Get one TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TiposDeInstrumentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoFindUniqueArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TiposDeInstrumento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TiposDeInstrumentoFindUniqueOrThrowArgs} args - Arguments to find a TiposDeInstrumento
     * @example
     * // Get one TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TiposDeInstrumentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TiposDeInstrumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoFindFirstArgs} args - Arguments to find a TiposDeInstrumento
     * @example
     * // Get one TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TiposDeInstrumentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoFindFirstArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TiposDeInstrumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoFindFirstOrThrowArgs} args - Arguments to find a TiposDeInstrumento
     * @example
     * // Get one TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TiposDeInstrumentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TiposDeInstrumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TiposDeInstrumentos
     * const tiposDeInstrumentos = await prisma.tiposDeInstrumento.findMany()
     * 
     * // Get first 10 TiposDeInstrumentos
     * const tiposDeInstrumentos = await prisma.tiposDeInstrumento.findMany({ take: 10 })
     * 
     * // Only select the `nomeInstrumento`
     * const tiposDeInstrumentoWithNomeInstrumentoOnly = await prisma.tiposDeInstrumento.findMany({ select: { nomeInstrumento: true } })
     * 
    **/
    findMany<T extends TiposDeInstrumentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TiposDeInstrumento.
     * @param {TiposDeInstrumentoCreateArgs} args - Arguments to create a TiposDeInstrumento.
     * @example
     * // Create one TiposDeInstrumento
     * const TiposDeInstrumento = await prisma.tiposDeInstrumento.create({
     *   data: {
     *     // ... data to create a TiposDeInstrumento
     *   }
     * })
     * 
    **/
    create<T extends TiposDeInstrumentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoCreateArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TiposDeInstrumentos.
     *     @param {TiposDeInstrumentoCreateManyArgs} args - Arguments to create many TiposDeInstrumentos.
     *     @example
     *     // Create many TiposDeInstrumentos
     *     const tiposDeInstrumento = await prisma.tiposDeInstrumento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TiposDeInstrumentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TiposDeInstrumento.
     * @param {TiposDeInstrumentoDeleteArgs} args - Arguments to delete one TiposDeInstrumento.
     * @example
     * // Delete one TiposDeInstrumento
     * const TiposDeInstrumento = await prisma.tiposDeInstrumento.delete({
     *   where: {
     *     // ... filter to delete one TiposDeInstrumento
     *   }
     * })
     * 
    **/
    delete<T extends TiposDeInstrumentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoDeleteArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TiposDeInstrumento.
     * @param {TiposDeInstrumentoUpdateArgs} args - Arguments to update one TiposDeInstrumento.
     * @example
     * // Update one TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TiposDeInstrumentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoUpdateArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TiposDeInstrumentos.
     * @param {TiposDeInstrumentoDeleteManyArgs} args - Arguments to filter TiposDeInstrumentos to delete.
     * @example
     * // Delete a few TiposDeInstrumentos
     * const { count } = await prisma.tiposDeInstrumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TiposDeInstrumentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TiposDeInstrumentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TiposDeInstrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TiposDeInstrumentos
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TiposDeInstrumentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TiposDeInstrumento.
     * @param {TiposDeInstrumentoUpsertArgs} args - Arguments to update or create a TiposDeInstrumento.
     * @example
     * // Update or create a TiposDeInstrumento
     * const tiposDeInstrumento = await prisma.tiposDeInstrumento.upsert({
     *   create: {
     *     // ... data to create a TiposDeInstrumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TiposDeInstrumento we want to update
     *   }
     * })
    **/
    upsert<T extends TiposDeInstrumentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TiposDeInstrumentoUpsertArgs<ExtArgs>>
    ): Prisma__TiposDeInstrumentoClient<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TiposDeInstrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoCountArgs} args - Arguments to filter TiposDeInstrumentos to count.
     * @example
     * // Count the number of TiposDeInstrumentos
     * const count = await prisma.tiposDeInstrumento.count({
     *   where: {
     *     // ... the filter for the TiposDeInstrumentos we want to count
     *   }
     * })
    **/
    count<T extends TiposDeInstrumentoCountArgs>(
      args?: Subset<T, TiposDeInstrumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TiposDeInstrumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TiposDeInstrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TiposDeInstrumentoAggregateArgs>(args: Subset<T, TiposDeInstrumentoAggregateArgs>): Prisma.PrismaPromise<GetTiposDeInstrumentoAggregateType<T>>

    /**
     * Group by TiposDeInstrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeInstrumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TiposDeInstrumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TiposDeInstrumentoGroupByArgs['orderBy'] }
        : { orderBy?: TiposDeInstrumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TiposDeInstrumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTiposDeInstrumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TiposDeInstrumento model
   */
  readonly fields: TiposDeInstrumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TiposDeInstrumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TiposDeInstrumentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    coordenador<T extends CoordenadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoordenadorDefaultArgs<ExtArgs>>): Prisma__CoordenadorClient<$Result.GetResult<Prisma.$CoordenadorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    curso<T extends CursoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CursoDefaultArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TiposDeInstrumento model
   */ 
  interface TiposDeInstrumentoFieldRefs {
    readonly nomeInstrumento: FieldRef<"TiposDeInstrumento", 'String'>
    readonly coordenadorId: FieldRef<"TiposDeInstrumento", 'Int'>
    readonly cursoId: FieldRef<"TiposDeInstrumento", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * TiposDeInstrumento findUnique
   */
  export type TiposDeInstrumentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeInstrumento to fetch.
     */
    where: TiposDeInstrumentoWhereUniqueInput
  }


  /**
   * TiposDeInstrumento findUniqueOrThrow
   */
  export type TiposDeInstrumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeInstrumento to fetch.
     */
    where: TiposDeInstrumentoWhereUniqueInput
  }


  /**
   * TiposDeInstrumento findFirst
   */
  export type TiposDeInstrumentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeInstrumento to fetch.
     */
    where?: TiposDeInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeInstrumentos to fetch.
     */
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TiposDeInstrumentos.
     */
    cursor?: TiposDeInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TiposDeInstrumentos.
     */
    distinct?: TiposDeInstrumentoScalarFieldEnum | TiposDeInstrumentoScalarFieldEnum[]
  }


  /**
   * TiposDeInstrumento findFirstOrThrow
   */
  export type TiposDeInstrumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeInstrumento to fetch.
     */
    where?: TiposDeInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeInstrumentos to fetch.
     */
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TiposDeInstrumentos.
     */
    cursor?: TiposDeInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TiposDeInstrumentos.
     */
    distinct?: TiposDeInstrumentoScalarFieldEnum | TiposDeInstrumentoScalarFieldEnum[]
  }


  /**
   * TiposDeInstrumento findMany
   */
  export type TiposDeInstrumentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeInstrumentos to fetch.
     */
    where?: TiposDeInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeInstrumentos to fetch.
     */
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TiposDeInstrumentos.
     */
    cursor?: TiposDeInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeInstrumentos.
     */
    skip?: number
    distinct?: TiposDeInstrumentoScalarFieldEnum | TiposDeInstrumentoScalarFieldEnum[]
  }


  /**
   * TiposDeInstrumento create
   */
  export type TiposDeInstrumentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a TiposDeInstrumento.
     */
    data: XOR<TiposDeInstrumentoCreateInput, TiposDeInstrumentoUncheckedCreateInput>
  }


  /**
   * TiposDeInstrumento createMany
   */
  export type TiposDeInstrumentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TiposDeInstrumentos.
     */
    data: TiposDeInstrumentoCreateManyInput | TiposDeInstrumentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TiposDeInstrumento update
   */
  export type TiposDeInstrumentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a TiposDeInstrumento.
     */
    data: XOR<TiposDeInstrumentoUpdateInput, TiposDeInstrumentoUncheckedUpdateInput>
    /**
     * Choose, which TiposDeInstrumento to update.
     */
    where: TiposDeInstrumentoWhereUniqueInput
  }


  /**
   * TiposDeInstrumento updateMany
   */
  export type TiposDeInstrumentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TiposDeInstrumentos.
     */
    data: XOR<TiposDeInstrumentoUpdateManyMutationInput, TiposDeInstrumentoUncheckedUpdateManyInput>
    /**
     * Filter which TiposDeInstrumentos to update
     */
    where?: TiposDeInstrumentoWhereInput
  }


  /**
   * TiposDeInstrumento upsert
   */
  export type TiposDeInstrumentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the TiposDeInstrumento to update in case it exists.
     */
    where: TiposDeInstrumentoWhereUniqueInput
    /**
     * In case the TiposDeInstrumento found by the `where` argument doesn't exist, create a new TiposDeInstrumento with this data.
     */
    create: XOR<TiposDeInstrumentoCreateInput, TiposDeInstrumentoUncheckedCreateInput>
    /**
     * In case the TiposDeInstrumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TiposDeInstrumentoUpdateInput, TiposDeInstrumentoUncheckedUpdateInput>
  }


  /**
   * TiposDeInstrumento delete
   */
  export type TiposDeInstrumentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    /**
     * Filter which TiposDeInstrumento to delete.
     */
    where: TiposDeInstrumentoWhereUniqueInput
  }


  /**
   * TiposDeInstrumento deleteMany
   */
  export type TiposDeInstrumentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TiposDeInstrumentos to delete
     */
    where?: TiposDeInstrumentoWhereInput
  }


  /**
   * TiposDeInstrumento without action
   */
  export type TiposDeInstrumentoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
  }



  /**
   * Model Instrumento
   */

  export type AggregateInstrumento = {
    _count: InstrumentoCountAggregateOutputType | null
    _avg: InstrumentoAvgAggregateOutputType | null
    _sum: InstrumentoSumAggregateOutputType | null
    _min: InstrumentoMinAggregateOutputType | null
    _max: InstrumentoMaxAggregateOutputType | null
  }

  export type InstrumentoAvgAggregateOutputType = {
    id: number | null
  }

  export type InstrumentoSumAggregateOutputType = {
    id: number | null
  }

  export type InstrumentoMinAggregateOutputType = {
    id: number | null
    nomeInstrumento: string | null
    marcaInstrumento: string | null
    estadoConservacaoDoInstrumento: string | null
    isEmprestado: boolean | null
  }

  export type InstrumentoMaxAggregateOutputType = {
    id: number | null
    nomeInstrumento: string | null
    marcaInstrumento: string | null
    estadoConservacaoDoInstrumento: string | null
    isEmprestado: boolean | null
  }

  export type InstrumentoCountAggregateOutputType = {
    id: number
    nomeInstrumento: number
    marcaInstrumento: number
    estadoConservacaoDoInstrumento: number
    isEmprestado: number
    _all: number
  }


  export type InstrumentoAvgAggregateInputType = {
    id?: true
  }

  export type InstrumentoSumAggregateInputType = {
    id?: true
  }

  export type InstrumentoMinAggregateInputType = {
    id?: true
    nomeInstrumento?: true
    marcaInstrumento?: true
    estadoConservacaoDoInstrumento?: true
    isEmprestado?: true
  }

  export type InstrumentoMaxAggregateInputType = {
    id?: true
    nomeInstrumento?: true
    marcaInstrumento?: true
    estadoConservacaoDoInstrumento?: true
    isEmprestado?: true
  }

  export type InstrumentoCountAggregateInputType = {
    id?: true
    nomeInstrumento?: true
    marcaInstrumento?: true
    estadoConservacaoDoInstrumento?: true
    isEmprestado?: true
    _all?: true
  }

  export type InstrumentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instrumento to aggregate.
     */
    where?: InstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrumentos to fetch.
     */
    orderBy?: InstrumentoOrderByWithRelationInput | InstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instrumentos
    **/
    _count?: true | InstrumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstrumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstrumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstrumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstrumentoMaxAggregateInputType
  }

  export type GetInstrumentoAggregateType<T extends InstrumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateInstrumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstrumento[P]>
      : GetScalarType<T[P], AggregateInstrumento[P]>
  }




  export type InstrumentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InstrumentoWhereInput
    orderBy?: InstrumentoOrderByWithAggregationInput | InstrumentoOrderByWithAggregationInput[]
    by: InstrumentoScalarFieldEnum[] | InstrumentoScalarFieldEnum
    having?: InstrumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstrumentoCountAggregateInputType | true
    _avg?: InstrumentoAvgAggregateInputType
    _sum?: InstrumentoSumAggregateInputType
    _min?: InstrumentoMinAggregateInputType
    _max?: InstrumentoMaxAggregateInputType
  }

  export type InstrumentoGroupByOutputType = {
    id: number
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
    _count: InstrumentoCountAggregateOutputType | null
    _avg: InstrumentoAvgAggregateOutputType | null
    _sum: InstrumentoSumAggregateOutputType | null
    _min: InstrumentoMinAggregateOutputType | null
    _max: InstrumentoMaxAggregateOutputType | null
  }

  type GetInstrumentoGroupByPayload<T extends InstrumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstrumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstrumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstrumentoGroupByOutputType[P]>
            : GetScalarType<T[P], InstrumentoGroupByOutputType[P]>
        }
      >
    >


  export type InstrumentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomeInstrumento?: boolean
    marcaInstrumento?: boolean
    estadoConservacaoDoInstrumento?: boolean
    isEmprestado?: boolean
    alunosEmprestimo?: boolean | Instrumento$alunosEmprestimoArgs<ExtArgs>
    _count?: boolean | InstrumentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instrumento"]>

  export type InstrumentoSelectScalar = {
    id?: boolean
    nomeInstrumento?: boolean
    marcaInstrumento?: boolean
    estadoConservacaoDoInstrumento?: boolean
    isEmprestado?: boolean
  }

  export type InstrumentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    alunosEmprestimo?: boolean | Instrumento$alunosEmprestimoArgs<ExtArgs>
    _count?: boolean | InstrumentoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InstrumentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Instrumento"
    objects: {
      alunosEmprestimo: Prisma.$EmprestimoInstrumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nomeInstrumento: string
      marcaInstrumento: string
      estadoConservacaoDoInstrumento: string
      isEmprestado: boolean
    }, ExtArgs["result"]["instrumento"]>
    composites: {}
  }


  type InstrumentoGetPayload<S extends boolean | null | undefined | InstrumentoDefaultArgs> = $Result.GetResult<Prisma.$InstrumentoPayload, S>

  type InstrumentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<InstrumentoFindManyArgs, 'select' | 'include'> & {
      select?: InstrumentoCountAggregateInputType | true
    }

  export interface InstrumentoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instrumento'], meta: { name: 'Instrumento' } }
    /**
     * Find zero or one Instrumento that matches the filter.
     * @param {InstrumentoFindUniqueArgs} args - Arguments to find a Instrumento
     * @example
     * // Get one Instrumento
     * const instrumento = await prisma.instrumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstrumentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoFindUniqueArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Instrumento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InstrumentoFindUniqueOrThrowArgs} args - Arguments to find a Instrumento
     * @example
     * // Get one Instrumento
     * const instrumento = await prisma.instrumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InstrumentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Instrumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoFindFirstArgs} args - Arguments to find a Instrumento
     * @example
     * // Get one Instrumento
     * const instrumento = await prisma.instrumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstrumentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoFindFirstArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Instrumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoFindFirstOrThrowArgs} args - Arguments to find a Instrumento
     * @example
     * // Get one Instrumento
     * const instrumento = await prisma.instrumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InstrumentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Instrumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instrumentos
     * const instrumentos = await prisma.instrumento.findMany()
     * 
     * // Get first 10 Instrumentos
     * const instrumentos = await prisma.instrumento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instrumentoWithIdOnly = await prisma.instrumento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstrumentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Instrumento.
     * @param {InstrumentoCreateArgs} args - Arguments to create a Instrumento.
     * @example
     * // Create one Instrumento
     * const Instrumento = await prisma.instrumento.create({
     *   data: {
     *     // ... data to create a Instrumento
     *   }
     * })
     * 
    **/
    create<T extends InstrumentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoCreateArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Instrumentos.
     *     @param {InstrumentoCreateManyArgs} args - Arguments to create many Instrumentos.
     *     @example
     *     // Create many Instrumentos
     *     const instrumento = await prisma.instrumento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstrumentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Instrumento.
     * @param {InstrumentoDeleteArgs} args - Arguments to delete one Instrumento.
     * @example
     * // Delete one Instrumento
     * const Instrumento = await prisma.instrumento.delete({
     *   where: {
     *     // ... filter to delete one Instrumento
     *   }
     * })
     * 
    **/
    delete<T extends InstrumentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoDeleteArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Instrumento.
     * @param {InstrumentoUpdateArgs} args - Arguments to update one Instrumento.
     * @example
     * // Update one Instrumento
     * const instrumento = await prisma.instrumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstrumentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoUpdateArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Instrumentos.
     * @param {InstrumentoDeleteManyArgs} args - Arguments to filter Instrumentos to delete.
     * @example
     * // Delete a few Instrumentos
     * const { count } = await prisma.instrumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstrumentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrumentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instrumentos
     * const instrumento = await prisma.instrumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstrumentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Instrumento.
     * @param {InstrumentoUpsertArgs} args - Arguments to update or create a Instrumento.
     * @example
     * // Update or create a Instrumento
     * const instrumento = await prisma.instrumento.upsert({
     *   create: {
     *     // ... data to create a Instrumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instrumento we want to update
     *   }
     * })
    **/
    upsert<T extends InstrumentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InstrumentoUpsertArgs<ExtArgs>>
    ): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Instrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoCountArgs} args - Arguments to filter Instrumentos to count.
     * @example
     * // Count the number of Instrumentos
     * const count = await prisma.instrumento.count({
     *   where: {
     *     // ... the filter for the Instrumentos we want to count
     *   }
     * })
    **/
    count<T extends InstrumentoCountArgs>(
      args?: Subset<T, InstrumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstrumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstrumentoAggregateArgs>(args: Subset<T, InstrumentoAggregateArgs>): Prisma.PrismaPromise<GetInstrumentoAggregateType<T>>

    /**
     * Group by Instrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstrumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstrumentoGroupByArgs['orderBy'] }
        : { orderBy?: InstrumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstrumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstrumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instrumento model
   */
  readonly fields: InstrumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instrumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstrumentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    alunosEmprestimo<T extends Instrumento$alunosEmprestimoArgs<ExtArgs> = {}>(args?: Subset<T, Instrumento$alunosEmprestimoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Instrumento model
   */ 
  interface InstrumentoFieldRefs {
    readonly id: FieldRef<"Instrumento", 'Int'>
    readonly nomeInstrumento: FieldRef<"Instrumento", 'String'>
    readonly marcaInstrumento: FieldRef<"Instrumento", 'String'>
    readonly estadoConservacaoDoInstrumento: FieldRef<"Instrumento", 'String'>
    readonly isEmprestado: FieldRef<"Instrumento", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Instrumento findUnique
   */
  export type InstrumentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which Instrumento to fetch.
     */
    where: InstrumentoWhereUniqueInput
  }


  /**
   * Instrumento findUniqueOrThrow
   */
  export type InstrumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which Instrumento to fetch.
     */
    where: InstrumentoWhereUniqueInput
  }


  /**
   * Instrumento findFirst
   */
  export type InstrumentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which Instrumento to fetch.
     */
    where?: InstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrumentos to fetch.
     */
    orderBy?: InstrumentoOrderByWithRelationInput | InstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instrumentos.
     */
    cursor?: InstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instrumentos.
     */
    distinct?: InstrumentoScalarFieldEnum | InstrumentoScalarFieldEnum[]
  }


  /**
   * Instrumento findFirstOrThrow
   */
  export type InstrumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which Instrumento to fetch.
     */
    where?: InstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrumentos to fetch.
     */
    orderBy?: InstrumentoOrderByWithRelationInput | InstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instrumentos.
     */
    cursor?: InstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instrumentos.
     */
    distinct?: InstrumentoScalarFieldEnum | InstrumentoScalarFieldEnum[]
  }


  /**
   * Instrumento findMany
   */
  export type InstrumentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which Instrumentos to fetch.
     */
    where?: InstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrumentos to fetch.
     */
    orderBy?: InstrumentoOrderByWithRelationInput | InstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instrumentos.
     */
    cursor?: InstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrumentos.
     */
    skip?: number
    distinct?: InstrumentoScalarFieldEnum | InstrumentoScalarFieldEnum[]
  }


  /**
   * Instrumento create
   */
  export type InstrumentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Instrumento.
     */
    data: XOR<InstrumentoCreateInput, InstrumentoUncheckedCreateInput>
  }


  /**
   * Instrumento createMany
   */
  export type InstrumentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instrumentos.
     */
    data: InstrumentoCreateManyInput | InstrumentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Instrumento update
   */
  export type InstrumentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Instrumento.
     */
    data: XOR<InstrumentoUpdateInput, InstrumentoUncheckedUpdateInput>
    /**
     * Choose, which Instrumento to update.
     */
    where: InstrumentoWhereUniqueInput
  }


  /**
   * Instrumento updateMany
   */
  export type InstrumentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instrumentos.
     */
    data: XOR<InstrumentoUpdateManyMutationInput, InstrumentoUncheckedUpdateManyInput>
    /**
     * Filter which Instrumentos to update
     */
    where?: InstrumentoWhereInput
  }


  /**
   * Instrumento upsert
   */
  export type InstrumentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Instrumento to update in case it exists.
     */
    where: InstrumentoWhereUniqueInput
    /**
     * In case the Instrumento found by the `where` argument doesn't exist, create a new Instrumento with this data.
     */
    create: XOR<InstrumentoCreateInput, InstrumentoUncheckedCreateInput>
    /**
     * In case the Instrumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstrumentoUpdateInput, InstrumentoUncheckedUpdateInput>
  }


  /**
   * Instrumento delete
   */
  export type InstrumentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
    /**
     * Filter which Instrumento to delete.
     */
    where: InstrumentoWhereUniqueInput
  }


  /**
   * Instrumento deleteMany
   */
  export type InstrumentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instrumentos to delete
     */
    where?: InstrumentoWhereInput
  }


  /**
   * Instrumento.alunosEmprestimo
   */
  export type Instrumento$alunosEmprestimoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    where?: EmprestimoInstrumentoWhereInput
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmprestimoInstrumentoScalarFieldEnum | EmprestimoInstrumentoScalarFieldEnum[]
  }


  /**
   * Instrumento without action
   */
  export type InstrumentoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrumento
     */
    select?: InstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstrumentoInclude<ExtArgs> | null
  }



  /**
   * Model EmprestimoInstrumento
   */

  export type AggregateEmprestimoInstrumento = {
    _count: EmprestimoInstrumentoCountAggregateOutputType | null
    _avg: EmprestimoInstrumentoAvgAggregateOutputType | null
    _sum: EmprestimoInstrumentoSumAggregateOutputType | null
    _min: EmprestimoInstrumentoMinAggregateOutputType | null
    _max: EmprestimoInstrumentoMaxAggregateOutputType | null
  }

  export type EmprestimoInstrumentoAvgAggregateOutputType = {
    instrumentoId: number | null
    alunoId: number | null
  }

  export type EmprestimoInstrumentoSumAggregateOutputType = {
    instrumentoId: number | null
    alunoId: number | null
  }

  export type EmprestimoInstrumentoMinAggregateOutputType = {
    instrumentoId: number | null
    alunoId: number | null
    dataInicialEmprestimo: Date | null
    dataFinalEmprestimo: Date | null
  }

  export type EmprestimoInstrumentoMaxAggregateOutputType = {
    instrumentoId: number | null
    alunoId: number | null
    dataInicialEmprestimo: Date | null
    dataFinalEmprestimo: Date | null
  }

  export type EmprestimoInstrumentoCountAggregateOutputType = {
    instrumentoId: number
    alunoId: number
    dataInicialEmprestimo: number
    dataFinalEmprestimo: number
    _all: number
  }


  export type EmprestimoInstrumentoAvgAggregateInputType = {
    instrumentoId?: true
    alunoId?: true
  }

  export type EmprestimoInstrumentoSumAggregateInputType = {
    instrumentoId?: true
    alunoId?: true
  }

  export type EmprestimoInstrumentoMinAggregateInputType = {
    instrumentoId?: true
    alunoId?: true
    dataInicialEmprestimo?: true
    dataFinalEmprestimo?: true
  }

  export type EmprestimoInstrumentoMaxAggregateInputType = {
    instrumentoId?: true
    alunoId?: true
    dataInicialEmprestimo?: true
    dataFinalEmprestimo?: true
  }

  export type EmprestimoInstrumentoCountAggregateInputType = {
    instrumentoId?: true
    alunoId?: true
    dataInicialEmprestimo?: true
    dataFinalEmprestimo?: true
    _all?: true
  }

  export type EmprestimoInstrumentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmprestimoInstrumento to aggregate.
     */
    where?: EmprestimoInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprestimoInstrumentos to fetch.
     */
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprestimoInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprestimoInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmprestimoInstrumentos
    **/
    _count?: true | EmprestimoInstrumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmprestimoInstrumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmprestimoInstrumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmprestimoInstrumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmprestimoInstrumentoMaxAggregateInputType
  }

  export type GetEmprestimoInstrumentoAggregateType<T extends EmprestimoInstrumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateEmprestimoInstrumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmprestimoInstrumento[P]>
      : GetScalarType<T[P], AggregateEmprestimoInstrumento[P]>
  }




  export type EmprestimoInstrumentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmprestimoInstrumentoWhereInput
    orderBy?: EmprestimoInstrumentoOrderByWithAggregationInput | EmprestimoInstrumentoOrderByWithAggregationInput[]
    by: EmprestimoInstrumentoScalarFieldEnum[] | EmprestimoInstrumentoScalarFieldEnum
    having?: EmprestimoInstrumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmprestimoInstrumentoCountAggregateInputType | true
    _avg?: EmprestimoInstrumentoAvgAggregateInputType
    _sum?: EmprestimoInstrumentoSumAggregateInputType
    _min?: EmprestimoInstrumentoMinAggregateInputType
    _max?: EmprestimoInstrumentoMaxAggregateInputType
  }

  export type EmprestimoInstrumentoGroupByOutputType = {
    instrumentoId: number
    alunoId: number
    dataInicialEmprestimo: Date
    dataFinalEmprestimo: Date | null
    _count: EmprestimoInstrumentoCountAggregateOutputType | null
    _avg: EmprestimoInstrumentoAvgAggregateOutputType | null
    _sum: EmprestimoInstrumentoSumAggregateOutputType | null
    _min: EmprestimoInstrumentoMinAggregateOutputType | null
    _max: EmprestimoInstrumentoMaxAggregateOutputType | null
  }

  type GetEmprestimoInstrumentoGroupByPayload<T extends EmprestimoInstrumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmprestimoInstrumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmprestimoInstrumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmprestimoInstrumentoGroupByOutputType[P]>
            : GetScalarType<T[P], EmprestimoInstrumentoGroupByOutputType[P]>
        }
      >
    >


  export type EmprestimoInstrumentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instrumentoId?: boolean
    alunoId?: boolean
    dataInicialEmprestimo?: boolean
    dataFinalEmprestimo?: boolean
    instrumento?: boolean | InstrumentoDefaultArgs<ExtArgs>
    aluno?: boolean | AlunoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emprestimoInstrumento"]>

  export type EmprestimoInstrumentoSelectScalar = {
    instrumentoId?: boolean
    alunoId?: boolean
    dataInicialEmprestimo?: boolean
    dataFinalEmprestimo?: boolean
  }

  export type EmprestimoInstrumentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumento?: boolean | InstrumentoDefaultArgs<ExtArgs>
    aluno?: boolean | AlunoDefaultArgs<ExtArgs>
  }


  export type $EmprestimoInstrumentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "EmprestimoInstrumento"
    objects: {
      instrumento: Prisma.$InstrumentoPayload<ExtArgs>
      aluno: Prisma.$AlunoPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      instrumentoId: number
      alunoId: number
      dataInicialEmprestimo: Date
      dataFinalEmprestimo: Date | null
    }, ExtArgs["result"]["emprestimoInstrumento"]>
    composites: {}
  }


  type EmprestimoInstrumentoGetPayload<S extends boolean | null | undefined | EmprestimoInstrumentoDefaultArgs> = $Result.GetResult<Prisma.$EmprestimoInstrumentoPayload, S>

  type EmprestimoInstrumentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EmprestimoInstrumentoFindManyArgs, 'select' | 'include'> & {
      select?: EmprestimoInstrumentoCountAggregateInputType | true
    }

  export interface EmprestimoInstrumentoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmprestimoInstrumento'], meta: { name: 'EmprestimoInstrumento' } }
    /**
     * Find zero or one EmprestimoInstrumento that matches the filter.
     * @param {EmprestimoInstrumentoFindUniqueArgs} args - Arguments to find a EmprestimoInstrumento
     * @example
     * // Get one EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmprestimoInstrumentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoFindUniqueArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmprestimoInstrumento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmprestimoInstrumentoFindUniqueOrThrowArgs} args - Arguments to find a EmprestimoInstrumento
     * @example
     * // Get one EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmprestimoInstrumentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmprestimoInstrumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoFindFirstArgs} args - Arguments to find a EmprestimoInstrumento
     * @example
     * // Get one EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmprestimoInstrumentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoFindFirstArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmprestimoInstrumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoFindFirstOrThrowArgs} args - Arguments to find a EmprestimoInstrumento
     * @example
     * // Get one EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmprestimoInstrumentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmprestimoInstrumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmprestimoInstrumentos
     * const emprestimoInstrumentos = await prisma.emprestimoInstrumento.findMany()
     * 
     * // Get first 10 EmprestimoInstrumentos
     * const emprestimoInstrumentos = await prisma.emprestimoInstrumento.findMany({ take: 10 })
     * 
     * // Only select the `instrumentoId`
     * const emprestimoInstrumentoWithInstrumentoIdOnly = await prisma.emprestimoInstrumento.findMany({ select: { instrumentoId: true } })
     * 
    **/
    findMany<T extends EmprestimoInstrumentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmprestimoInstrumento.
     * @param {EmprestimoInstrumentoCreateArgs} args - Arguments to create a EmprestimoInstrumento.
     * @example
     * // Create one EmprestimoInstrumento
     * const EmprestimoInstrumento = await prisma.emprestimoInstrumento.create({
     *   data: {
     *     // ... data to create a EmprestimoInstrumento
     *   }
     * })
     * 
    **/
    create<T extends EmprestimoInstrumentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoCreateArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmprestimoInstrumentos.
     *     @param {EmprestimoInstrumentoCreateManyArgs} args - Arguments to create many EmprestimoInstrumentos.
     *     @example
     *     // Create many EmprestimoInstrumentos
     *     const emprestimoInstrumento = await prisma.emprestimoInstrumento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmprestimoInstrumentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmprestimoInstrumento.
     * @param {EmprestimoInstrumentoDeleteArgs} args - Arguments to delete one EmprestimoInstrumento.
     * @example
     * // Delete one EmprestimoInstrumento
     * const EmprestimoInstrumento = await prisma.emprestimoInstrumento.delete({
     *   where: {
     *     // ... filter to delete one EmprestimoInstrumento
     *   }
     * })
     * 
    **/
    delete<T extends EmprestimoInstrumentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoDeleteArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmprestimoInstrumento.
     * @param {EmprestimoInstrumentoUpdateArgs} args - Arguments to update one EmprestimoInstrumento.
     * @example
     * // Update one EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmprestimoInstrumentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoUpdateArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmprestimoInstrumentos.
     * @param {EmprestimoInstrumentoDeleteManyArgs} args - Arguments to filter EmprestimoInstrumentos to delete.
     * @example
     * // Delete a few EmprestimoInstrumentos
     * const { count } = await prisma.emprestimoInstrumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmprestimoInstrumentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmprestimoInstrumentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmprestimoInstrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmprestimoInstrumentos
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmprestimoInstrumentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmprestimoInstrumento.
     * @param {EmprestimoInstrumentoUpsertArgs} args - Arguments to update or create a EmprestimoInstrumento.
     * @example
     * // Update or create a EmprestimoInstrumento
     * const emprestimoInstrumento = await prisma.emprestimoInstrumento.upsert({
     *   create: {
     *     // ... data to create a EmprestimoInstrumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmprestimoInstrumento we want to update
     *   }
     * })
    **/
    upsert<T extends EmprestimoInstrumentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmprestimoInstrumentoUpsertArgs<ExtArgs>>
    ): Prisma__EmprestimoInstrumentoClient<$Result.GetResult<Prisma.$EmprestimoInstrumentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmprestimoInstrumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoCountArgs} args - Arguments to filter EmprestimoInstrumentos to count.
     * @example
     * // Count the number of EmprestimoInstrumentos
     * const count = await prisma.emprestimoInstrumento.count({
     *   where: {
     *     // ... the filter for the EmprestimoInstrumentos we want to count
     *   }
     * })
    **/
    count<T extends EmprestimoInstrumentoCountArgs>(
      args?: Subset<T, EmprestimoInstrumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmprestimoInstrumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmprestimoInstrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmprestimoInstrumentoAggregateArgs>(args: Subset<T, EmprestimoInstrumentoAggregateArgs>): Prisma.PrismaPromise<GetEmprestimoInstrumentoAggregateType<T>>

    /**
     * Group by EmprestimoInstrumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprestimoInstrumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmprestimoInstrumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmprestimoInstrumentoGroupByArgs['orderBy'] }
        : { orderBy?: EmprestimoInstrumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmprestimoInstrumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmprestimoInstrumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmprestimoInstrumento model
   */
  readonly fields: EmprestimoInstrumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmprestimoInstrumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmprestimoInstrumentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instrumento<T extends InstrumentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentoDefaultArgs<ExtArgs>>): Prisma__InstrumentoClient<$Result.GetResult<Prisma.$InstrumentoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    aluno<T extends AlunoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlunoDefaultArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmprestimoInstrumento model
   */ 
  interface EmprestimoInstrumentoFieldRefs {
    readonly instrumentoId: FieldRef<"EmprestimoInstrumento", 'Int'>
    readonly alunoId: FieldRef<"EmprestimoInstrumento", 'Int'>
    readonly dataInicialEmprestimo: FieldRef<"EmprestimoInstrumento", 'DateTime'>
    readonly dataFinalEmprestimo: FieldRef<"EmprestimoInstrumento", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * EmprestimoInstrumento findUnique
   */
  export type EmprestimoInstrumentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which EmprestimoInstrumento to fetch.
     */
    where: EmprestimoInstrumentoWhereUniqueInput
  }


  /**
   * EmprestimoInstrumento findUniqueOrThrow
   */
  export type EmprestimoInstrumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which EmprestimoInstrumento to fetch.
     */
    where: EmprestimoInstrumentoWhereUniqueInput
  }


  /**
   * EmprestimoInstrumento findFirst
   */
  export type EmprestimoInstrumentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which EmprestimoInstrumento to fetch.
     */
    where?: EmprestimoInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprestimoInstrumentos to fetch.
     */
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmprestimoInstrumentos.
     */
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprestimoInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprestimoInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmprestimoInstrumentos.
     */
    distinct?: EmprestimoInstrumentoScalarFieldEnum | EmprestimoInstrumentoScalarFieldEnum[]
  }


  /**
   * EmprestimoInstrumento findFirstOrThrow
   */
  export type EmprestimoInstrumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which EmprestimoInstrumento to fetch.
     */
    where?: EmprestimoInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprestimoInstrumentos to fetch.
     */
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmprestimoInstrumentos.
     */
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprestimoInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprestimoInstrumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmprestimoInstrumentos.
     */
    distinct?: EmprestimoInstrumentoScalarFieldEnum | EmprestimoInstrumentoScalarFieldEnum[]
  }


  /**
   * EmprestimoInstrumento findMany
   */
  export type EmprestimoInstrumentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter, which EmprestimoInstrumentos to fetch.
     */
    where?: EmprestimoInstrumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprestimoInstrumentos to fetch.
     */
    orderBy?: EmprestimoInstrumentoOrderByWithRelationInput | EmprestimoInstrumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmprestimoInstrumentos.
     */
    cursor?: EmprestimoInstrumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprestimoInstrumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprestimoInstrumentos.
     */
    skip?: number
    distinct?: EmprestimoInstrumentoScalarFieldEnum | EmprestimoInstrumentoScalarFieldEnum[]
  }


  /**
   * EmprestimoInstrumento create
   */
  export type EmprestimoInstrumentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a EmprestimoInstrumento.
     */
    data: XOR<EmprestimoInstrumentoCreateInput, EmprestimoInstrumentoUncheckedCreateInput>
  }


  /**
   * EmprestimoInstrumento createMany
   */
  export type EmprestimoInstrumentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmprestimoInstrumentos.
     */
    data: EmprestimoInstrumentoCreateManyInput | EmprestimoInstrumentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EmprestimoInstrumento update
   */
  export type EmprestimoInstrumentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a EmprestimoInstrumento.
     */
    data: XOR<EmprestimoInstrumentoUpdateInput, EmprestimoInstrumentoUncheckedUpdateInput>
    /**
     * Choose, which EmprestimoInstrumento to update.
     */
    where: EmprestimoInstrumentoWhereUniqueInput
  }


  /**
   * EmprestimoInstrumento updateMany
   */
  export type EmprestimoInstrumentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmprestimoInstrumentos.
     */
    data: XOR<EmprestimoInstrumentoUpdateManyMutationInput, EmprestimoInstrumentoUncheckedUpdateManyInput>
    /**
     * Filter which EmprestimoInstrumentos to update
     */
    where?: EmprestimoInstrumentoWhereInput
  }


  /**
   * EmprestimoInstrumento upsert
   */
  export type EmprestimoInstrumentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the EmprestimoInstrumento to update in case it exists.
     */
    where: EmprestimoInstrumentoWhereUniqueInput
    /**
     * In case the EmprestimoInstrumento found by the `where` argument doesn't exist, create a new EmprestimoInstrumento with this data.
     */
    create: XOR<EmprestimoInstrumentoCreateInput, EmprestimoInstrumentoUncheckedCreateInput>
    /**
     * In case the EmprestimoInstrumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmprestimoInstrumentoUpdateInput, EmprestimoInstrumentoUncheckedUpdateInput>
  }


  /**
   * EmprestimoInstrumento delete
   */
  export type EmprestimoInstrumentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
    /**
     * Filter which EmprestimoInstrumento to delete.
     */
    where: EmprestimoInstrumentoWhereUniqueInput
  }


  /**
   * EmprestimoInstrumento deleteMany
   */
  export type EmprestimoInstrumentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmprestimoInstrumentos to delete
     */
    where?: EmprestimoInstrumentoWhereInput
  }


  /**
   * EmprestimoInstrumento without action
   */
  export type EmprestimoInstrumentoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprestimoInstrumento
     */
    select?: EmprestimoInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmprestimoInstrumentoInclude<ExtArgs> | null
  }



  /**
   * Model Curso
   */

  export type AggregateCurso = {
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  export type CursoAvgAggregateOutputType = {
    id: number | null
  }

  export type CursoSumAggregateOutputType = {
    id: number | null
  }

  export type CursoMinAggregateOutputType = {
    id: number | null
    nomeCurso: string | null
  }

  export type CursoMaxAggregateOutputType = {
    id: number | null
    nomeCurso: string | null
  }

  export type CursoCountAggregateOutputType = {
    id: number
    nomeCurso: number
    _all: number
  }


  export type CursoAvgAggregateInputType = {
    id?: true
  }

  export type CursoSumAggregateInputType = {
    id?: true
  }

  export type CursoMinAggregateInputType = {
    id?: true
    nomeCurso?: true
  }

  export type CursoMaxAggregateInputType = {
    id?: true
    nomeCurso?: true
  }

  export type CursoCountAggregateInputType = {
    id?: true
    nomeCurso?: true
    _all?: true
  }

  export type CursoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curso to aggregate.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursos
    **/
    _count?: true | CursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoMaxAggregateInputType
  }

  export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
        [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurso[P]>
      : GetScalarType<T[P], AggregateCurso[P]>
  }




  export type CursoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CursoWhereInput
    orderBy?: CursoOrderByWithAggregationInput | CursoOrderByWithAggregationInput[]
    by: CursoScalarFieldEnum[] | CursoScalarFieldEnum
    having?: CursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoCountAggregateInputType | true
    _avg?: CursoAvgAggregateInputType
    _sum?: CursoSumAggregateInputType
    _min?: CursoMinAggregateInputType
    _max?: CursoMaxAggregateInputType
  }

  export type CursoGroupByOutputType = {
    id: number
    nomeCurso: string
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  type GetCursoGroupByPayload<T extends CursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoGroupByOutputType[P]>
            : GetScalarType<T[P], CursoGroupByOutputType[P]>
        }
      >
    >


  export type CursoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomeCurso?: boolean
    instrumentosCurso?: boolean | Curso$instrumentosCursoArgs<ExtArgs>
    _count?: boolean | CursoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curso"]>

  export type CursoSelectScalar = {
    id?: boolean
    nomeCurso?: boolean
  }

  export type CursoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    instrumentosCurso?: boolean | Curso$instrumentosCursoArgs<ExtArgs>
    _count?: boolean | CursoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CursoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Curso"
    objects: {
      instrumentosCurso: Prisma.$TiposDeInstrumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nomeCurso: string
    }, ExtArgs["result"]["curso"]>
    composites: {}
  }


  type CursoGetPayload<S extends boolean | null | undefined | CursoDefaultArgs> = $Result.GetResult<Prisma.$CursoPayload, S>

  type CursoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CursoFindManyArgs, 'select' | 'include'> & {
      select?: CursoCountAggregateInputType | true
    }

  export interface CursoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curso'], meta: { name: 'Curso' } }
    /**
     * Find zero or one Curso that matches the filter.
     * @param {CursoFindUniqueArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CursoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CursoFindUniqueArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curso that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CursoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CursoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindFirstArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CursoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursos
     * const cursos = await prisma.curso.findMany()
     * 
     * // Get first 10 Cursos
     * const cursos = await prisma.curso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoWithIdOnly = await prisma.curso.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CursoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curso.
     * @param {CursoCreateArgs} args - Arguments to create a Curso.
     * @example
     * // Create one Curso
     * const Curso = await prisma.curso.create({
     *   data: {
     *     // ... data to create a Curso
     *   }
     * })
     * 
    **/
    create<T extends CursoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoCreateArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cursos.
     *     @param {CursoCreateManyArgs} args - Arguments to create many Cursos.
     *     @example
     *     // Create many Cursos
     *     const curso = await prisma.curso.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CursoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curso.
     * @param {CursoDeleteArgs} args - Arguments to delete one Curso.
     * @example
     * // Delete one Curso
     * const Curso = await prisma.curso.delete({
     *   where: {
     *     // ... filter to delete one Curso
     *   }
     * })
     * 
    **/
    delete<T extends CursoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CursoDeleteArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curso.
     * @param {CursoUpdateArgs} args - Arguments to update one Curso.
     * @example
     * // Update one Curso
     * const curso = await prisma.curso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CursoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpdateArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cursos.
     * @param {CursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
     * @example
     * // Delete a few Cursos
     * const { count } = await prisma.curso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CursoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CursoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursos
     * const curso = await prisma.curso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CursoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curso.
     * @param {CursoUpsertArgs} args - Arguments to update or create a Curso.
     * @example
     * // Update or create a Curso
     * const curso = await prisma.curso.upsert({
     *   create: {
     *     // ... data to create a Curso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curso we want to update
     *   }
     * })
    **/
    upsert<T extends CursoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CursoUpsertArgs<ExtArgs>>
    ): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoCountArgs} args - Arguments to filter Cursos to count.
     * @example
     * // Count the number of Cursos
     * const count = await prisma.curso.count({
     *   where: {
     *     // ... the filter for the Cursos we want to count
     *   }
     * })
    **/
    count<T extends CursoCountArgs>(
      args?: Subset<T, CursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoAggregateArgs>(args: Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

    /**
     * Group by Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursoGroupByArgs['orderBy'] }
        : { orderBy?: CursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curso model
   */
  readonly fields: CursoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CursoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instrumentosCurso<T extends Curso$instrumentosCursoArgs<ExtArgs> = {}>(args?: Subset<T, Curso$instrumentosCursoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TiposDeInstrumentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Curso model
   */ 
  interface CursoFieldRefs {
    readonly id: FieldRef<"Curso", 'Int'>
    readonly nomeCurso: FieldRef<"Curso", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Curso findUnique
   */
  export type CursoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso findUniqueOrThrow
   */
  export type CursoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso findFirst
   */
  export type CursoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso findFirstOrThrow
   */
  export type CursoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso findMany
   */
  export type CursoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Cursos to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * Curso create
   */
  export type CursoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The data needed to create a Curso.
     */
    data: XOR<CursoCreateInput, CursoUncheckedCreateInput>
  }


  /**
   * Curso createMany
   */
  export type CursoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cursos.
     */
    data: CursoCreateManyInput | CursoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Curso update
   */
  export type CursoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The data needed to update a Curso.
     */
    data: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
    /**
     * Choose, which Curso to update.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso updateMany
   */
  export type CursoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cursos.
     */
    data: XOR<CursoUpdateManyMutationInput, CursoUncheckedUpdateManyInput>
    /**
     * Filter which Cursos to update
     */
    where?: CursoWhereInput
  }


  /**
   * Curso upsert
   */
  export type CursoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The filter to search for the Curso to update in case it exists.
     */
    where: CursoWhereUniqueInput
    /**
     * In case the Curso found by the `where` argument doesn't exist, create a new Curso with this data.
     */
    create: XOR<CursoCreateInput, CursoUncheckedCreateInput>
    /**
     * In case the Curso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
  }


  /**
   * Curso delete
   */
  export type CursoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter which Curso to delete.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso deleteMany
   */
  export type CursoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cursos to delete
     */
    where?: CursoWhereInput
  }


  /**
   * Curso.instrumentosCurso
   */
  export type Curso$instrumentosCursoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeInstrumento
     */
    select?: TiposDeInstrumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TiposDeInstrumentoInclude<ExtArgs> | null
    where?: TiposDeInstrumentoWhereInput
    orderBy?: TiposDeInstrumentoOrderByWithRelationInput | TiposDeInstrumentoOrderByWithRelationInput[]
    cursor?: TiposDeInstrumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TiposDeInstrumentoScalarFieldEnum | TiposDeInstrumentoScalarFieldEnum[]
  }


  /**
   * Curso without action
   */
  export type CursoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude<ExtArgs> | null
  }



  /**
   * Model Turma
   */

  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    id: number | null
    nroAlunos: number | null
  }

  export type TurmaSumAggregateOutputType = {
    id: number | null
    nroAlunos: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: number | null
    nroAlunos: number | null
    isAtiva: boolean | null
    horario: string | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: number | null
    nroAlunos: number | null
    isAtiva: boolean | null
    horario: string | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    nroAlunos: number
    isAtiva: number
    horario: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    id?: true
    nroAlunos?: true
  }

  export type TurmaSumAggregateInputType = {
    id?: true
    nroAlunos?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    nroAlunos?: true
    isAtiva?: true
    horario?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    nroAlunos?: true
    isAtiva?: true
    horario?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    nroAlunos?: true
    isAtiva?: true
    horario?: true
    _all?: true
  }

  export type TurmaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turma to aggregate.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type TurmaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithAggregationInput | TurmaOrderByWithAggregationInput[]
    by: TurmaScalarFieldEnum[] | TurmaScalarFieldEnum
    having?: TurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }

  export type TurmaGroupByOutputType = {
    id: number
    nroAlunos: number
    isAtiva: boolean
    horario: string
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends TurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type TurmaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nroAlunos?: boolean
    isAtiva?: boolean
    horario?: boolean
    diaDaSemana?: boolean | Turma$diaDaSemanaArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectScalar = {
    id?: boolean
    nroAlunos?: boolean
    isAtiva?: boolean
    horario?: boolean
  }

  export type TurmaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    diaDaSemana?: boolean | Turma$diaDaSemanaArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TurmaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Turma"
    objects: {
      diaDaSemana: Prisma.$DiaDaSemanaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nroAlunos: number
      isAtiva: boolean
      horario: string
    }, ExtArgs["result"]["turma"]>
    composites: {}
  }


  type TurmaGetPayload<S extends boolean | null | undefined | TurmaDefaultArgs> = $Result.GetResult<Prisma.$TurmaPayload, S>

  type TurmaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TurmaFindManyArgs, 'select' | 'include'> & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface TurmaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turma'], meta: { name: 'Turma' } }
    /**
     * Find zero or one Turma that matches the filter.
     * @param {TurmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TurmaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaFindUniqueArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Turma that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TurmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TurmaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TurmaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindFirstArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Turma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TurmaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TurmaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Turma.
     * @param {TurmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
    **/
    create<T extends TurmaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaCreateArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Turmas.
     *     @param {TurmaCreateManyArgs} args - Arguments to create many Turmas.
     *     @example
     *     // Create many Turmas
     *     const turma = await prisma.turma.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TurmaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turma.
     * @param {TurmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
    **/
    delete<T extends TurmaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaDeleteArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Turma.
     * @param {TurmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TurmaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpdateArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Turmas.
     * @param {TurmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TurmaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TurmaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turma.
     * @param {TurmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
    **/
    upsert<T extends TurmaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpsertArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends TurmaCountArgs>(
      args?: Subset<T, TurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaGroupByArgs['orderBy'] }
        : { orderBy?: TurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turma model
   */
  readonly fields: TurmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    diaDaSemana<T extends Turma$diaDaSemanaArgs<ExtArgs> = {}>(args?: Subset<T, Turma$diaDaSemanaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Turma model
   */ 
  interface TurmaFieldRefs {
    readonly id: FieldRef<"Turma", 'Int'>
    readonly nroAlunos: FieldRef<"Turma", 'Int'>
    readonly isAtiva: FieldRef<"Turma", 'Boolean'>
    readonly horario: FieldRef<"Turma", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Turma findUnique
   */
  export type TurmaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma findUniqueOrThrow
   */
  export type TurmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma findFirst
   */
  export type TurmaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma findFirstOrThrow
   */
  export type TurmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma findMany
   */
  export type TurmaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turmas to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma create
   */
  export type TurmaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to create a Turma.
     */
    data: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
  }


  /**
   * Turma createMany
   */
  export type TurmaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turmas.
     */
    data: TurmaCreateManyInput | TurmaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Turma update
   */
  export type TurmaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to update a Turma.
     */
    data: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
    /**
     * Choose, which Turma to update.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma updateMany
   */
  export type TurmaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma upsert
   */
  export type TurmaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The filter to search for the Turma to update in case it exists.
     */
    where: TurmaWhereUniqueInput
    /**
     * In case the Turma found by the `where` argument doesn't exist, create a new Turma with this data.
     */
    create: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
    /**
     * In case the Turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
  }


  /**
   * Turma delete
   */
  export type TurmaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter which Turma to delete.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma deleteMany
   */
  export type TurmaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turmas to delete
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma.diaDaSemana
   */
  export type Turma$diaDaSemanaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    where?: DiaDaSemanaWhereInput
    orderBy?: DiaDaSemanaOrderByWithRelationInput | DiaDaSemanaOrderByWithRelationInput[]
    cursor?: DiaDaSemanaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiaDaSemanaScalarFieldEnum | DiaDaSemanaScalarFieldEnum[]
  }


  /**
   * Turma without action
   */
  export type TurmaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
  }



  /**
   * Model DiaDaSemana
   */

  export type AggregateDiaDaSemana = {
    _count: DiaDaSemanaCountAggregateOutputType | null
    _avg: DiaDaSemanaAvgAggregateOutputType | null
    _sum: DiaDaSemanaSumAggregateOutputType | null
    _min: DiaDaSemanaMinAggregateOutputType | null
    _max: DiaDaSemanaMaxAggregateOutputType | null
  }

  export type DiaDaSemanaAvgAggregateOutputType = {
    turmaId: number | null
    diaDaSemanaInt: number | null
  }

  export type DiaDaSemanaSumAggregateOutputType = {
    turmaId: number | null
    diaDaSemanaInt: number | null
  }

  export type DiaDaSemanaMinAggregateOutputType = {
    turmaId: number | null
    diaDaSemanaInt: number | null
    diaDaSemanaString: string | null
  }

  export type DiaDaSemanaMaxAggregateOutputType = {
    turmaId: number | null
    diaDaSemanaInt: number | null
    diaDaSemanaString: string | null
  }

  export type DiaDaSemanaCountAggregateOutputType = {
    turmaId: number
    diaDaSemanaInt: number
    diaDaSemanaString: number
    _all: number
  }


  export type DiaDaSemanaAvgAggregateInputType = {
    turmaId?: true
    diaDaSemanaInt?: true
  }

  export type DiaDaSemanaSumAggregateInputType = {
    turmaId?: true
    diaDaSemanaInt?: true
  }

  export type DiaDaSemanaMinAggregateInputType = {
    turmaId?: true
    diaDaSemanaInt?: true
    diaDaSemanaString?: true
  }

  export type DiaDaSemanaMaxAggregateInputType = {
    turmaId?: true
    diaDaSemanaInt?: true
    diaDaSemanaString?: true
  }

  export type DiaDaSemanaCountAggregateInputType = {
    turmaId?: true
    diaDaSemanaInt?: true
    diaDaSemanaString?: true
    _all?: true
  }

  export type DiaDaSemanaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiaDaSemana to aggregate.
     */
    where?: DiaDaSemanaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaDaSemanas to fetch.
     */
    orderBy?: DiaDaSemanaOrderByWithRelationInput | DiaDaSemanaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiaDaSemanaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaDaSemanas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaDaSemanas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiaDaSemanas
    **/
    _count?: true | DiaDaSemanaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiaDaSemanaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiaDaSemanaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiaDaSemanaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiaDaSemanaMaxAggregateInputType
  }

  export type GetDiaDaSemanaAggregateType<T extends DiaDaSemanaAggregateArgs> = {
        [P in keyof T & keyof AggregateDiaDaSemana]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiaDaSemana[P]>
      : GetScalarType<T[P], AggregateDiaDaSemana[P]>
  }




  export type DiaDaSemanaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DiaDaSemanaWhereInput
    orderBy?: DiaDaSemanaOrderByWithAggregationInput | DiaDaSemanaOrderByWithAggregationInput[]
    by: DiaDaSemanaScalarFieldEnum[] | DiaDaSemanaScalarFieldEnum
    having?: DiaDaSemanaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiaDaSemanaCountAggregateInputType | true
    _avg?: DiaDaSemanaAvgAggregateInputType
    _sum?: DiaDaSemanaSumAggregateInputType
    _min?: DiaDaSemanaMinAggregateInputType
    _max?: DiaDaSemanaMaxAggregateInputType
  }

  export type DiaDaSemanaGroupByOutputType = {
    turmaId: number | null
    diaDaSemanaInt: number
    diaDaSemanaString: string
    _count: DiaDaSemanaCountAggregateOutputType | null
    _avg: DiaDaSemanaAvgAggregateOutputType | null
    _sum: DiaDaSemanaSumAggregateOutputType | null
    _min: DiaDaSemanaMinAggregateOutputType | null
    _max: DiaDaSemanaMaxAggregateOutputType | null
  }

  type GetDiaDaSemanaGroupByPayload<T extends DiaDaSemanaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiaDaSemanaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiaDaSemanaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiaDaSemanaGroupByOutputType[P]>
            : GetScalarType<T[P], DiaDaSemanaGroupByOutputType[P]>
        }
      >
    >


  export type DiaDaSemanaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    turmaId?: boolean
    diaDaSemanaInt?: boolean
    diaDaSemanaString?: boolean
    Turma?: boolean | DiaDaSemana$TurmaArgs<ExtArgs>
  }, ExtArgs["result"]["diaDaSemana"]>

  export type DiaDaSemanaSelectScalar = {
    turmaId?: boolean
    diaDaSemanaInt?: boolean
    diaDaSemanaString?: boolean
  }

  export type DiaDaSemanaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Turma?: boolean | DiaDaSemana$TurmaArgs<ExtArgs>
  }


  export type $DiaDaSemanaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "DiaDaSemana"
    objects: {
      Turma: Prisma.$TurmaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      turmaId: number | null
      diaDaSemanaInt: number
      diaDaSemanaString: string
    }, ExtArgs["result"]["diaDaSemana"]>
    composites: {}
  }


  type DiaDaSemanaGetPayload<S extends boolean | null | undefined | DiaDaSemanaDefaultArgs> = $Result.GetResult<Prisma.$DiaDaSemanaPayload, S>

  type DiaDaSemanaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DiaDaSemanaFindManyArgs, 'select' | 'include'> & {
      select?: DiaDaSemanaCountAggregateInputType | true
    }

  export interface DiaDaSemanaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiaDaSemana'], meta: { name: 'DiaDaSemana' } }
    /**
     * Find zero or one DiaDaSemana that matches the filter.
     * @param {DiaDaSemanaFindUniqueArgs} args - Arguments to find a DiaDaSemana
     * @example
     * // Get one DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DiaDaSemanaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaFindUniqueArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DiaDaSemana that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DiaDaSemanaFindUniqueOrThrowArgs} args - Arguments to find a DiaDaSemana
     * @example
     * // Get one DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DiaDaSemanaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DiaDaSemana that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaFindFirstArgs} args - Arguments to find a DiaDaSemana
     * @example
     * // Get one DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DiaDaSemanaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaFindFirstArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DiaDaSemana that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaFindFirstOrThrowArgs} args - Arguments to find a DiaDaSemana
     * @example
     * // Get one DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DiaDaSemanaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DiaDaSemanas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiaDaSemanas
     * const diaDaSemanas = await prisma.diaDaSemana.findMany()
     * 
     * // Get first 10 DiaDaSemanas
     * const diaDaSemanas = await prisma.diaDaSemana.findMany({ take: 10 })
     * 
     * // Only select the `turmaId`
     * const diaDaSemanaWithTurmaIdOnly = await prisma.diaDaSemana.findMany({ select: { turmaId: true } })
     * 
    **/
    findMany<T extends DiaDaSemanaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DiaDaSemana.
     * @param {DiaDaSemanaCreateArgs} args - Arguments to create a DiaDaSemana.
     * @example
     * // Create one DiaDaSemana
     * const DiaDaSemana = await prisma.diaDaSemana.create({
     *   data: {
     *     // ... data to create a DiaDaSemana
     *   }
     * })
     * 
    **/
    create<T extends DiaDaSemanaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaCreateArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DiaDaSemanas.
     *     @param {DiaDaSemanaCreateManyArgs} args - Arguments to create many DiaDaSemanas.
     *     @example
     *     // Create many DiaDaSemanas
     *     const diaDaSemana = await prisma.diaDaSemana.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DiaDaSemanaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DiaDaSemana.
     * @param {DiaDaSemanaDeleteArgs} args - Arguments to delete one DiaDaSemana.
     * @example
     * // Delete one DiaDaSemana
     * const DiaDaSemana = await prisma.diaDaSemana.delete({
     *   where: {
     *     // ... filter to delete one DiaDaSemana
     *   }
     * })
     * 
    **/
    delete<T extends DiaDaSemanaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaDeleteArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DiaDaSemana.
     * @param {DiaDaSemanaUpdateArgs} args - Arguments to update one DiaDaSemana.
     * @example
     * // Update one DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DiaDaSemanaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaUpdateArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DiaDaSemanas.
     * @param {DiaDaSemanaDeleteManyArgs} args - Arguments to filter DiaDaSemanas to delete.
     * @example
     * // Delete a few DiaDaSemanas
     * const { count } = await prisma.diaDaSemana.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DiaDaSemanaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiaDaSemanaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiaDaSemanas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiaDaSemanas
     * const diaDaSemana = await prisma.diaDaSemana.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DiaDaSemanaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiaDaSemana.
     * @param {DiaDaSemanaUpsertArgs} args - Arguments to update or create a DiaDaSemana.
     * @example
     * // Update or create a DiaDaSemana
     * const diaDaSemana = await prisma.diaDaSemana.upsert({
     *   create: {
     *     // ... data to create a DiaDaSemana
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiaDaSemana we want to update
     *   }
     * })
    **/
    upsert<T extends DiaDaSemanaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DiaDaSemanaUpsertArgs<ExtArgs>>
    ): Prisma__DiaDaSemanaClient<$Result.GetResult<Prisma.$DiaDaSemanaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DiaDaSemanas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaCountArgs} args - Arguments to filter DiaDaSemanas to count.
     * @example
     * // Count the number of DiaDaSemanas
     * const count = await prisma.diaDaSemana.count({
     *   where: {
     *     // ... the filter for the DiaDaSemanas we want to count
     *   }
     * })
    **/
    count<T extends DiaDaSemanaCountArgs>(
      args?: Subset<T, DiaDaSemanaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiaDaSemanaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiaDaSemana.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiaDaSemanaAggregateArgs>(args: Subset<T, DiaDaSemanaAggregateArgs>): Prisma.PrismaPromise<GetDiaDaSemanaAggregateType<T>>

    /**
     * Group by DiaDaSemana.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaDaSemanaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiaDaSemanaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiaDaSemanaGroupByArgs['orderBy'] }
        : { orderBy?: DiaDaSemanaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiaDaSemanaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiaDaSemanaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiaDaSemana model
   */
  readonly fields: DiaDaSemanaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiaDaSemana.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiaDaSemanaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Turma<T extends DiaDaSemana$TurmaArgs<ExtArgs> = {}>(args?: Subset<T, DiaDaSemana$TurmaArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DiaDaSemana model
   */ 
  interface DiaDaSemanaFieldRefs {
    readonly turmaId: FieldRef<"DiaDaSemana", 'Int'>
    readonly diaDaSemanaInt: FieldRef<"DiaDaSemana", 'Int'>
    readonly diaDaSemanaString: FieldRef<"DiaDaSemana", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DiaDaSemana findUnique
   */
  export type DiaDaSemanaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter, which DiaDaSemana to fetch.
     */
    where: DiaDaSemanaWhereUniqueInput
  }


  /**
   * DiaDaSemana findUniqueOrThrow
   */
  export type DiaDaSemanaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter, which DiaDaSemana to fetch.
     */
    where: DiaDaSemanaWhereUniqueInput
  }


  /**
   * DiaDaSemana findFirst
   */
  export type DiaDaSemanaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter, which DiaDaSemana to fetch.
     */
    where?: DiaDaSemanaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaDaSemanas to fetch.
     */
    orderBy?: DiaDaSemanaOrderByWithRelationInput | DiaDaSemanaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiaDaSemanas.
     */
    cursor?: DiaDaSemanaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaDaSemanas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaDaSemanas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiaDaSemanas.
     */
    distinct?: DiaDaSemanaScalarFieldEnum | DiaDaSemanaScalarFieldEnum[]
  }


  /**
   * DiaDaSemana findFirstOrThrow
   */
  export type DiaDaSemanaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter, which DiaDaSemana to fetch.
     */
    where?: DiaDaSemanaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaDaSemanas to fetch.
     */
    orderBy?: DiaDaSemanaOrderByWithRelationInput | DiaDaSemanaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiaDaSemanas.
     */
    cursor?: DiaDaSemanaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaDaSemanas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaDaSemanas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiaDaSemanas.
     */
    distinct?: DiaDaSemanaScalarFieldEnum | DiaDaSemanaScalarFieldEnum[]
  }


  /**
   * DiaDaSemana findMany
   */
  export type DiaDaSemanaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter, which DiaDaSemanas to fetch.
     */
    where?: DiaDaSemanaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaDaSemanas to fetch.
     */
    orderBy?: DiaDaSemanaOrderByWithRelationInput | DiaDaSemanaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiaDaSemanas.
     */
    cursor?: DiaDaSemanaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaDaSemanas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaDaSemanas.
     */
    skip?: number
    distinct?: DiaDaSemanaScalarFieldEnum | DiaDaSemanaScalarFieldEnum[]
  }


  /**
   * DiaDaSemana create
   */
  export type DiaDaSemanaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * The data needed to create a DiaDaSemana.
     */
    data: XOR<DiaDaSemanaCreateInput, DiaDaSemanaUncheckedCreateInput>
  }


  /**
   * DiaDaSemana createMany
   */
  export type DiaDaSemanaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiaDaSemanas.
     */
    data: DiaDaSemanaCreateManyInput | DiaDaSemanaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DiaDaSemana update
   */
  export type DiaDaSemanaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * The data needed to update a DiaDaSemana.
     */
    data: XOR<DiaDaSemanaUpdateInput, DiaDaSemanaUncheckedUpdateInput>
    /**
     * Choose, which DiaDaSemana to update.
     */
    where: DiaDaSemanaWhereUniqueInput
  }


  /**
   * DiaDaSemana updateMany
   */
  export type DiaDaSemanaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiaDaSemanas.
     */
    data: XOR<DiaDaSemanaUpdateManyMutationInput, DiaDaSemanaUncheckedUpdateManyInput>
    /**
     * Filter which DiaDaSemanas to update
     */
    where?: DiaDaSemanaWhereInput
  }


  /**
   * DiaDaSemana upsert
   */
  export type DiaDaSemanaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * The filter to search for the DiaDaSemana to update in case it exists.
     */
    where: DiaDaSemanaWhereUniqueInput
    /**
     * In case the DiaDaSemana found by the `where` argument doesn't exist, create a new DiaDaSemana with this data.
     */
    create: XOR<DiaDaSemanaCreateInput, DiaDaSemanaUncheckedCreateInput>
    /**
     * In case the DiaDaSemana was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiaDaSemanaUpdateInput, DiaDaSemanaUncheckedUpdateInput>
  }


  /**
   * DiaDaSemana delete
   */
  export type DiaDaSemanaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
    /**
     * Filter which DiaDaSemana to delete.
     */
    where: DiaDaSemanaWhereUniqueInput
  }


  /**
   * DiaDaSemana deleteMany
   */
  export type DiaDaSemanaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiaDaSemanas to delete
     */
    where?: DiaDaSemanaWhereInput
  }


  /**
   * DiaDaSemana.Turma
   */
  export type DiaDaSemana$TurmaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    where?: TurmaWhereInput
  }


  /**
   * DiaDaSemana without action
   */
  export type DiaDaSemanaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaDaSemana
     */
    select?: DiaDaSemanaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiaDaSemanaInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    dataNascimento: 'dataNascimento',
    created_at: 'created_at',
    updated_at: 'updated_at',
    senha: 'senha'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const AlunoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    dataNascimento: 'dataNascimento',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AlunoScalarFieldEnum = (typeof AlunoScalarFieldEnum)[keyof typeof AlunoScalarFieldEnum]


  export const CoordenadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    dataNascimento: 'dataNascimento',
    salario: 'salario',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CoordenadorScalarFieldEnum = (typeof CoordenadorScalarFieldEnum)[keyof typeof CoordenadorScalarFieldEnum]


  export const TiposDeInstrumentoScalarFieldEnum: {
    nomeInstrumento: 'nomeInstrumento',
    coordenadorId: 'coordenadorId',
    cursoId: 'cursoId'
  };

  export type TiposDeInstrumentoScalarFieldEnum = (typeof TiposDeInstrumentoScalarFieldEnum)[keyof typeof TiposDeInstrumentoScalarFieldEnum]


  export const InstrumentoScalarFieldEnum: {
    id: 'id',
    nomeInstrumento: 'nomeInstrumento',
    marcaInstrumento: 'marcaInstrumento',
    estadoConservacaoDoInstrumento: 'estadoConservacaoDoInstrumento',
    isEmprestado: 'isEmprestado'
  };

  export type InstrumentoScalarFieldEnum = (typeof InstrumentoScalarFieldEnum)[keyof typeof InstrumentoScalarFieldEnum]


  export const EmprestimoInstrumentoScalarFieldEnum: {
    instrumentoId: 'instrumentoId',
    alunoId: 'alunoId',
    dataInicialEmprestimo: 'dataInicialEmprestimo',
    dataFinalEmprestimo: 'dataFinalEmprestimo'
  };

  export type EmprestimoInstrumentoScalarFieldEnum = (typeof EmprestimoInstrumentoScalarFieldEnum)[keyof typeof EmprestimoInstrumentoScalarFieldEnum]


  export const CursoScalarFieldEnum: {
    id: 'id',
    nomeCurso: 'nomeCurso'
  };

  export type CursoScalarFieldEnum = (typeof CursoScalarFieldEnum)[keyof typeof CursoScalarFieldEnum]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    nroAlunos: 'nroAlunos',
    isAtiva: 'isAtiva',
    horario: 'horario'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  export const DiaDaSemanaScalarFieldEnum: {
    turmaId: 'turmaId',
    diaDaSemanaInt: 'diaDaSemanaInt',
    diaDaSemanaString: 'diaDaSemanaString'
  };

  export type DiaDaSemanaScalarFieldEnum = (typeof DiaDaSemanaScalarFieldEnum)[keyof typeof DiaDaSemanaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    nome?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    telefone?: StringFilter<"Admin"> | string
    dataNascimento?: DateTimeFilter<"Admin"> | Date | string
    created_at?: DateTimeFilter<"Admin"> | Date | string
    updated_at?: DateTimeFilter<"Admin"> | Date | string
    senha?: StringFilter<"Admin"> | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    senha?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    nome?: StringFilter<"Admin"> | string
    telefone?: StringFilter<"Admin"> | string
    dataNascimento?: DateTimeFilter<"Admin"> | Date | string
    created_at?: DateTimeFilter<"Admin"> | Date | string
    updated_at?: DateTimeFilter<"Admin"> | Date | string
    senha?: StringFilter<"Admin"> | string
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    senha?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    nome?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    telefone?: StringWithAggregatesFilter<"Admin"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    senha?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type AlunoWhereInput = {
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    id?: IntFilter<"Aluno"> | number
    nome?: StringFilter<"Aluno"> | string
    email?: StringFilter<"Aluno"> | string
    telefone?: StringFilter<"Aluno"> | string
    dataNascimento?: DateTimeFilter<"Aluno"> | Date | string
    created_at?: DateTimeFilter<"Aluno"> | Date | string
    updated_at?: DateTimeFilter<"Aluno"> | Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoListRelationFilter
  }

  export type AlunoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    instrumentoEmprestimo?: EmprestimoInstrumentoOrderByRelationAggregateInput
  }

  export type AlunoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    nome?: StringFilter<"Aluno"> | string
    telefone?: StringFilter<"Aluno"> | string
    dataNascimento?: DateTimeFilter<"Aluno"> | Date | string
    created_at?: DateTimeFilter<"Aluno"> | Date | string
    updated_at?: DateTimeFilter<"Aluno"> | Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoListRelationFilter
  }, "id" | "email">

  export type AlunoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AlunoCountOrderByAggregateInput
    _avg?: AlunoAvgOrderByAggregateInput
    _max?: AlunoMaxOrderByAggregateInput
    _min?: AlunoMinOrderByAggregateInput
    _sum?: AlunoSumOrderByAggregateInput
  }

  export type AlunoScalarWhereWithAggregatesInput = {
    AND?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    OR?: AlunoScalarWhereWithAggregatesInput[]
    NOT?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Aluno"> | number
    nome?: StringWithAggregatesFilter<"Aluno"> | string
    email?: StringWithAggregatesFilter<"Aluno"> | string
    telefone?: StringWithAggregatesFilter<"Aluno"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
  }

  export type CoordenadorWhereInput = {
    AND?: CoordenadorWhereInput | CoordenadorWhereInput[]
    OR?: CoordenadorWhereInput[]
    NOT?: CoordenadorWhereInput | CoordenadorWhereInput[]
    id?: IntFilter<"Coordenador"> | number
    nome?: StringFilter<"Coordenador"> | string
    email?: StringFilter<"Coordenador"> | string
    telefone?: StringFilter<"Coordenador"> | string
    dataNascimento?: DateTimeFilter<"Coordenador"> | Date | string
    salario?: DecimalNullableFilter<"Coordenador"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFilter<"Coordenador"> | Date | string
    updated_at?: DateTimeFilter<"Coordenador"> | Date | string
    instrumentosLeciona?: TiposDeInstrumentoListRelationFilter
  }

  export type CoordenadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    salario?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    instrumentosLeciona?: TiposDeInstrumentoOrderByRelationAggregateInput
  }

  export type CoordenadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CoordenadorWhereInput | CoordenadorWhereInput[]
    OR?: CoordenadorWhereInput[]
    NOT?: CoordenadorWhereInput | CoordenadorWhereInput[]
    nome?: StringFilter<"Coordenador"> | string
    telefone?: StringFilter<"Coordenador"> | string
    dataNascimento?: DateTimeFilter<"Coordenador"> | Date | string
    salario?: DecimalNullableFilter<"Coordenador"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFilter<"Coordenador"> | Date | string
    updated_at?: DateTimeFilter<"Coordenador"> | Date | string
    instrumentosLeciona?: TiposDeInstrumentoListRelationFilter
  }, "id" | "email">

  export type CoordenadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    salario?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CoordenadorCountOrderByAggregateInput
    _avg?: CoordenadorAvgOrderByAggregateInput
    _max?: CoordenadorMaxOrderByAggregateInput
    _min?: CoordenadorMinOrderByAggregateInput
    _sum?: CoordenadorSumOrderByAggregateInput
  }

  export type CoordenadorScalarWhereWithAggregatesInput = {
    AND?: CoordenadorScalarWhereWithAggregatesInput | CoordenadorScalarWhereWithAggregatesInput[]
    OR?: CoordenadorScalarWhereWithAggregatesInput[]
    NOT?: CoordenadorScalarWhereWithAggregatesInput | CoordenadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coordenador"> | number
    nome?: StringWithAggregatesFilter<"Coordenador"> | string
    email?: StringWithAggregatesFilter<"Coordenador"> | string
    telefone?: StringWithAggregatesFilter<"Coordenador"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Coordenador"> | Date | string
    salario?: DecimalNullableWithAggregatesFilter<"Coordenador"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeWithAggregatesFilter<"Coordenador"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Coordenador"> | Date | string
  }

  export type TiposDeInstrumentoWhereInput = {
    AND?: TiposDeInstrumentoWhereInput | TiposDeInstrumentoWhereInput[]
    OR?: TiposDeInstrumentoWhereInput[]
    NOT?: TiposDeInstrumentoWhereInput | TiposDeInstrumentoWhereInput[]
    nomeInstrumento?: StringFilter<"TiposDeInstrumento"> | string
    coordenadorId?: IntFilter<"TiposDeInstrumento"> | number
    cursoId?: IntFilter<"TiposDeInstrumento"> | number
    coordenador?: XOR<CoordenadorRelationFilter, CoordenadorWhereInput>
    curso?: XOR<CursoRelationFilter, CursoWhereInput>
  }

  export type TiposDeInstrumentoOrderByWithRelationInput = {
    nomeInstrumento?: SortOrder
    coordenadorId?: SortOrder
    cursoId?: SortOrder
    coordenador?: CoordenadorOrderByWithRelationInput
    curso?: CursoOrderByWithRelationInput
  }

  export type TiposDeInstrumentoWhereUniqueInput = Prisma.AtLeast<{
    nomeInstrumento?: string
    AND?: TiposDeInstrumentoWhereInput | TiposDeInstrumentoWhereInput[]
    OR?: TiposDeInstrumentoWhereInput[]
    NOT?: TiposDeInstrumentoWhereInput | TiposDeInstrumentoWhereInput[]
    coordenadorId?: IntFilter<"TiposDeInstrumento"> | number
    cursoId?: IntFilter<"TiposDeInstrumento"> | number
    coordenador?: XOR<CoordenadorRelationFilter, CoordenadorWhereInput>
    curso?: XOR<CursoRelationFilter, CursoWhereInput>
  }, "nomeInstrumento">

  export type TiposDeInstrumentoOrderByWithAggregationInput = {
    nomeInstrumento?: SortOrder
    coordenadorId?: SortOrder
    cursoId?: SortOrder
    _count?: TiposDeInstrumentoCountOrderByAggregateInput
    _avg?: TiposDeInstrumentoAvgOrderByAggregateInput
    _max?: TiposDeInstrumentoMaxOrderByAggregateInput
    _min?: TiposDeInstrumentoMinOrderByAggregateInput
    _sum?: TiposDeInstrumentoSumOrderByAggregateInput
  }

  export type TiposDeInstrumentoScalarWhereWithAggregatesInput = {
    AND?: TiposDeInstrumentoScalarWhereWithAggregatesInput | TiposDeInstrumentoScalarWhereWithAggregatesInput[]
    OR?: TiposDeInstrumentoScalarWhereWithAggregatesInput[]
    NOT?: TiposDeInstrumentoScalarWhereWithAggregatesInput | TiposDeInstrumentoScalarWhereWithAggregatesInput[]
    nomeInstrumento?: StringWithAggregatesFilter<"TiposDeInstrumento"> | string
    coordenadorId?: IntWithAggregatesFilter<"TiposDeInstrumento"> | number
    cursoId?: IntWithAggregatesFilter<"TiposDeInstrumento"> | number
  }

  export type InstrumentoWhereInput = {
    AND?: InstrumentoWhereInput | InstrumentoWhereInput[]
    OR?: InstrumentoWhereInput[]
    NOT?: InstrumentoWhereInput | InstrumentoWhereInput[]
    id?: IntFilter<"Instrumento"> | number
    nomeInstrumento?: StringFilter<"Instrumento"> | string
    marcaInstrumento?: StringFilter<"Instrumento"> | string
    estadoConservacaoDoInstrumento?: StringFilter<"Instrumento"> | string
    isEmprestado?: BoolFilter<"Instrumento"> | boolean
    alunosEmprestimo?: EmprestimoInstrumentoListRelationFilter
  }

  export type InstrumentoOrderByWithRelationInput = {
    id?: SortOrder
    nomeInstrumento?: SortOrder
    marcaInstrumento?: SortOrder
    estadoConservacaoDoInstrumento?: SortOrder
    isEmprestado?: SortOrder
    alunosEmprestimo?: EmprestimoInstrumentoOrderByRelationAggregateInput
  }

  export type InstrumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InstrumentoWhereInput | InstrumentoWhereInput[]
    OR?: InstrumentoWhereInput[]
    NOT?: InstrumentoWhereInput | InstrumentoWhereInput[]
    nomeInstrumento?: StringFilter<"Instrumento"> | string
    marcaInstrumento?: StringFilter<"Instrumento"> | string
    estadoConservacaoDoInstrumento?: StringFilter<"Instrumento"> | string
    isEmprestado?: BoolFilter<"Instrumento"> | boolean
    alunosEmprestimo?: EmprestimoInstrumentoListRelationFilter
  }, "id">

  export type InstrumentoOrderByWithAggregationInput = {
    id?: SortOrder
    nomeInstrumento?: SortOrder
    marcaInstrumento?: SortOrder
    estadoConservacaoDoInstrumento?: SortOrder
    isEmprestado?: SortOrder
    _count?: InstrumentoCountOrderByAggregateInput
    _avg?: InstrumentoAvgOrderByAggregateInput
    _max?: InstrumentoMaxOrderByAggregateInput
    _min?: InstrumentoMinOrderByAggregateInput
    _sum?: InstrumentoSumOrderByAggregateInput
  }

  export type InstrumentoScalarWhereWithAggregatesInput = {
    AND?: InstrumentoScalarWhereWithAggregatesInput | InstrumentoScalarWhereWithAggregatesInput[]
    OR?: InstrumentoScalarWhereWithAggregatesInput[]
    NOT?: InstrumentoScalarWhereWithAggregatesInput | InstrumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Instrumento"> | number
    nomeInstrumento?: StringWithAggregatesFilter<"Instrumento"> | string
    marcaInstrumento?: StringWithAggregatesFilter<"Instrumento"> | string
    estadoConservacaoDoInstrumento?: StringWithAggregatesFilter<"Instrumento"> | string
    isEmprestado?: BoolWithAggregatesFilter<"Instrumento"> | boolean
  }

  export type EmprestimoInstrumentoWhereInput = {
    AND?: EmprestimoInstrumentoWhereInput | EmprestimoInstrumentoWhereInput[]
    OR?: EmprestimoInstrumentoWhereInput[]
    NOT?: EmprestimoInstrumentoWhereInput | EmprestimoInstrumentoWhereInput[]
    instrumentoId?: IntFilter<"EmprestimoInstrumento"> | number
    alunoId?: IntFilter<"EmprestimoInstrumento"> | number
    dataInicialEmprestimo?: DateTimeFilter<"EmprestimoInstrumento"> | Date | string
    dataFinalEmprestimo?: DateTimeNullableFilter<"EmprestimoInstrumento"> | Date | string | null
    instrumento?: XOR<InstrumentoRelationFilter, InstrumentoWhereInput>
    aluno?: XOR<AlunoRelationFilter, AlunoWhereInput>
  }

  export type EmprestimoInstrumentoOrderByWithRelationInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
    dataInicialEmprestimo?: SortOrder
    dataFinalEmprestimo?: SortOrderInput | SortOrder
    instrumento?: InstrumentoOrderByWithRelationInput
    aluno?: AlunoOrderByWithRelationInput
  }

  export type EmprestimoInstrumentoWhereUniqueInput = Prisma.AtLeast<{
    instrumentoId_alunoId?: EmprestimoInstrumentoInstrumentoIdAlunoIdCompoundUniqueInput
    AND?: EmprestimoInstrumentoWhereInput | EmprestimoInstrumentoWhereInput[]
    OR?: EmprestimoInstrumentoWhereInput[]
    NOT?: EmprestimoInstrumentoWhereInput | EmprestimoInstrumentoWhereInput[]
    instrumentoId?: IntFilter<"EmprestimoInstrumento"> | number
    alunoId?: IntFilter<"EmprestimoInstrumento"> | number
    dataInicialEmprestimo?: DateTimeFilter<"EmprestimoInstrumento"> | Date | string
    dataFinalEmprestimo?: DateTimeNullableFilter<"EmprestimoInstrumento"> | Date | string | null
    instrumento?: XOR<InstrumentoRelationFilter, InstrumentoWhereInput>
    aluno?: XOR<AlunoRelationFilter, AlunoWhereInput>
  }, "instrumentoId_alunoId">

  export type EmprestimoInstrumentoOrderByWithAggregationInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
    dataInicialEmprestimo?: SortOrder
    dataFinalEmprestimo?: SortOrderInput | SortOrder
    _count?: EmprestimoInstrumentoCountOrderByAggregateInput
    _avg?: EmprestimoInstrumentoAvgOrderByAggregateInput
    _max?: EmprestimoInstrumentoMaxOrderByAggregateInput
    _min?: EmprestimoInstrumentoMinOrderByAggregateInput
    _sum?: EmprestimoInstrumentoSumOrderByAggregateInput
  }

  export type EmprestimoInstrumentoScalarWhereWithAggregatesInput = {
    AND?: EmprestimoInstrumentoScalarWhereWithAggregatesInput | EmprestimoInstrumentoScalarWhereWithAggregatesInput[]
    OR?: EmprestimoInstrumentoScalarWhereWithAggregatesInput[]
    NOT?: EmprestimoInstrumentoScalarWhereWithAggregatesInput | EmprestimoInstrumentoScalarWhereWithAggregatesInput[]
    instrumentoId?: IntWithAggregatesFilter<"EmprestimoInstrumento"> | number
    alunoId?: IntWithAggregatesFilter<"EmprestimoInstrumento"> | number
    dataInicialEmprestimo?: DateTimeWithAggregatesFilter<"EmprestimoInstrumento"> | Date | string
    dataFinalEmprestimo?: DateTimeNullableWithAggregatesFilter<"EmprestimoInstrumento"> | Date | string | null
  }

  export type CursoWhereInput = {
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    id?: IntFilter<"Curso"> | number
    nomeCurso?: StringFilter<"Curso"> | string
    instrumentosCurso?: TiposDeInstrumentoListRelationFilter
  }

  export type CursoOrderByWithRelationInput = {
    id?: SortOrder
    nomeCurso?: SortOrder
    instrumentosCurso?: TiposDeInstrumentoOrderByRelationAggregateInput
  }

  export type CursoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nomeCurso?: string
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    instrumentosCurso?: TiposDeInstrumentoListRelationFilter
  }, "id" | "nomeCurso">

  export type CursoOrderByWithAggregationInput = {
    id?: SortOrder
    nomeCurso?: SortOrder
    _count?: CursoCountOrderByAggregateInput
    _avg?: CursoAvgOrderByAggregateInput
    _max?: CursoMaxOrderByAggregateInput
    _min?: CursoMinOrderByAggregateInput
    _sum?: CursoSumOrderByAggregateInput
  }

  export type CursoScalarWhereWithAggregatesInput = {
    AND?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    OR?: CursoScalarWhereWithAggregatesInput[]
    NOT?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Curso"> | number
    nomeCurso?: StringWithAggregatesFilter<"Curso"> | string
  }

  export type TurmaWhereInput = {
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    id?: IntFilter<"Turma"> | number
    nroAlunos?: IntFilter<"Turma"> | number
    isAtiva?: BoolFilter<"Turma"> | boolean
    horario?: StringFilter<"Turma"> | string
    diaDaSemana?: DiaDaSemanaListRelationFilter
  }

  export type TurmaOrderByWithRelationInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
    isAtiva?: SortOrder
    horario?: SortOrder
    diaDaSemana?: DiaDaSemanaOrderByRelationAggregateInput
  }

  export type TurmaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    nroAlunos?: IntFilter<"Turma"> | number
    isAtiva?: BoolFilter<"Turma"> | boolean
    horario?: StringFilter<"Turma"> | string
    diaDaSemana?: DiaDaSemanaListRelationFilter
  }, "id">

  export type TurmaOrderByWithAggregationInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
    isAtiva?: SortOrder
    horario?: SortOrder
    _count?: TurmaCountOrderByAggregateInput
    _avg?: TurmaAvgOrderByAggregateInput
    _max?: TurmaMaxOrderByAggregateInput
    _min?: TurmaMinOrderByAggregateInput
    _sum?: TurmaSumOrderByAggregateInput
  }

  export type TurmaScalarWhereWithAggregatesInput = {
    AND?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    OR?: TurmaScalarWhereWithAggregatesInput[]
    NOT?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turma"> | number
    nroAlunos?: IntWithAggregatesFilter<"Turma"> | number
    isAtiva?: BoolWithAggregatesFilter<"Turma"> | boolean
    horario?: StringWithAggregatesFilter<"Turma"> | string
  }

  export type DiaDaSemanaWhereInput = {
    AND?: DiaDaSemanaWhereInput | DiaDaSemanaWhereInput[]
    OR?: DiaDaSemanaWhereInput[]
    NOT?: DiaDaSemanaWhereInput | DiaDaSemanaWhereInput[]
    turmaId?: IntNullableFilter<"DiaDaSemana"> | number | null
    diaDaSemanaInt?: IntFilter<"DiaDaSemana"> | number
    diaDaSemanaString?: StringFilter<"DiaDaSemana"> | string
    Turma?: XOR<TurmaNullableRelationFilter, TurmaWhereInput> | null
  }

  export type DiaDaSemanaOrderByWithRelationInput = {
    turmaId?: SortOrderInput | SortOrder
    diaDaSemanaInt?: SortOrder
    diaDaSemanaString?: SortOrder
    Turma?: TurmaOrderByWithRelationInput
  }

  export type DiaDaSemanaWhereUniqueInput = Prisma.AtLeast<{
    diaDaSemanaInt?: number
    diaDaSemanaString?: string
    AND?: DiaDaSemanaWhereInput | DiaDaSemanaWhereInput[]
    OR?: DiaDaSemanaWhereInput[]
    NOT?: DiaDaSemanaWhereInput | DiaDaSemanaWhereInput[]
    turmaId?: IntNullableFilter<"DiaDaSemana"> | number | null
    Turma?: XOR<TurmaNullableRelationFilter, TurmaWhereInput> | null
  }, "diaDaSemanaInt" | "diaDaSemanaString">

  export type DiaDaSemanaOrderByWithAggregationInput = {
    turmaId?: SortOrderInput | SortOrder
    diaDaSemanaInt?: SortOrder
    diaDaSemanaString?: SortOrder
    _count?: DiaDaSemanaCountOrderByAggregateInput
    _avg?: DiaDaSemanaAvgOrderByAggregateInput
    _max?: DiaDaSemanaMaxOrderByAggregateInput
    _min?: DiaDaSemanaMinOrderByAggregateInput
    _sum?: DiaDaSemanaSumOrderByAggregateInput
  }

  export type DiaDaSemanaScalarWhereWithAggregatesInput = {
    AND?: DiaDaSemanaScalarWhereWithAggregatesInput | DiaDaSemanaScalarWhereWithAggregatesInput[]
    OR?: DiaDaSemanaScalarWhereWithAggregatesInput[]
    NOT?: DiaDaSemanaScalarWhereWithAggregatesInput | DiaDaSemanaScalarWhereWithAggregatesInput[]
    turmaId?: IntNullableWithAggregatesFilter<"DiaDaSemana"> | number | null
    diaDaSemanaInt?: IntWithAggregatesFilter<"DiaDaSemana"> | number
    diaDaSemanaString?: StringWithAggregatesFilter<"DiaDaSemana"> | string
  }

  export type AdminCreateInput = {
    id?: string
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    senha: string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    senha: string
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: string
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    senha: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type AlunoCreateInput = {
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    instrumentoEmprestimo?: EmprestimoInstrumentoUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AlunoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoordenadorCreateInput = {
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    salario?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string
    updated_at?: Date | string
    instrumentosLeciona?: TiposDeInstrumentoCreateNestedManyWithoutCoordenadorInput
  }

  export type CoordenadorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    salario?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string
    updated_at?: Date | string
    instrumentosLeciona?: TiposDeInstrumentoUncheckedCreateNestedManyWithoutCoordenadorInput
  }

  export type CoordenadorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    instrumentosLeciona?: TiposDeInstrumentoUpdateManyWithoutCoordenadorNestedInput
  }

  export type CoordenadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    instrumentosLeciona?: TiposDeInstrumentoUncheckedUpdateManyWithoutCoordenadorNestedInput
  }

  export type CoordenadorCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    salario?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CoordenadorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoordenadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TiposDeInstrumentoCreateInput = {
    nomeInstrumento: string
    coordenador: CoordenadorCreateNestedOneWithoutInstrumentosLecionaInput
    curso: CursoCreateNestedOneWithoutInstrumentosCursoInput
  }

  export type TiposDeInstrumentoUncheckedCreateInput = {
    nomeInstrumento: string
    coordenadorId: number
    cursoId: number
  }

  export type TiposDeInstrumentoUpdateInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenador?: CoordenadorUpdateOneRequiredWithoutInstrumentosLecionaNestedInput
    curso?: CursoUpdateOneRequiredWithoutInstrumentosCursoNestedInput
  }

  export type TiposDeInstrumentoUncheckedUpdateInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenadorId?: IntFieldUpdateOperationsInput | number
    cursoId?: IntFieldUpdateOperationsInput | number
  }

  export type TiposDeInstrumentoCreateManyInput = {
    nomeInstrumento: string
    coordenadorId: number
    cursoId: number
  }

  export type TiposDeInstrumentoUpdateManyMutationInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
  }

  export type TiposDeInstrumentoUncheckedUpdateManyInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenadorId?: IntFieldUpdateOperationsInput | number
    cursoId?: IntFieldUpdateOperationsInput | number
  }

  export type InstrumentoCreateInput = {
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
    alunosEmprestimo?: EmprestimoInstrumentoCreateNestedManyWithoutInstrumentoInput
  }

  export type InstrumentoUncheckedCreateInput = {
    id?: number
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
    alunosEmprestimo?: EmprestimoInstrumentoUncheckedCreateNestedManyWithoutInstrumentoInput
  }

  export type InstrumentoUpdateInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
    alunosEmprestimo?: EmprestimoInstrumentoUpdateManyWithoutInstrumentoNestedInput
  }

  export type InstrumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
    alunosEmprestimo?: EmprestimoInstrumentoUncheckedUpdateManyWithoutInstrumentoNestedInput
  }

  export type InstrumentoCreateManyInput = {
    id?: number
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
  }

  export type InstrumentoUpdateManyMutationInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstrumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmprestimoInstrumentoCreateInput = {
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
    instrumento: InstrumentoCreateNestedOneWithoutAlunosEmprestimoInput
    aluno: AlunoCreateNestedOneWithoutInstrumentoEmprestimoInput
  }

  export type EmprestimoInstrumentoUncheckedCreateInput = {
    instrumentoId: number
    alunoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoUpdateInput = {
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instrumento?: InstrumentoUpdateOneRequiredWithoutAlunosEmprestimoNestedInput
    aluno?: AlunoUpdateOneRequiredWithoutInstrumentoEmprestimoNestedInput
  }

  export type EmprestimoInstrumentoUncheckedUpdateInput = {
    instrumentoId?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmprestimoInstrumentoCreateManyInput = {
    instrumentoId: number
    alunoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoUpdateManyMutationInput = {
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmprestimoInstrumentoUncheckedUpdateManyInput = {
    instrumentoId?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CursoCreateInput = {
    nomeCurso: string
    instrumentosCurso?: TiposDeInstrumentoCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateInput = {
    id?: number
    nomeCurso: string
    instrumentosCurso?: TiposDeInstrumentoUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoUpdateInput = {
    nomeCurso?: StringFieldUpdateOperationsInput | string
    instrumentosCurso?: TiposDeInstrumentoUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCurso?: StringFieldUpdateOperationsInput | string
    instrumentosCurso?: TiposDeInstrumentoUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type CursoCreateManyInput = {
    id?: number
    nomeCurso: string
  }

  export type CursoUpdateManyMutationInput = {
    nomeCurso?: StringFieldUpdateOperationsInput | string
  }

  export type CursoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCurso?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaCreateInput = {
    nroAlunos: number
    isAtiva: boolean
    horario: string
    diaDaSemana?: DiaDaSemanaCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateInput = {
    id?: number
    nroAlunos: number
    isAtiva: boolean
    horario: string
    diaDaSemana?: DiaDaSemanaUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUpdateInput = {
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
    diaDaSemana?: DiaDaSemanaUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
    diaDaSemana?: DiaDaSemanaUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaCreateManyInput = {
    id?: number
    nroAlunos: number
    isAtiva: boolean
    horario: string
  }

  export type TurmaUpdateManyMutationInput = {
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type DiaDaSemanaCreateInput = {
    diaDaSemanaInt: number
    diaDaSemanaString: string
    Turma?: TurmaCreateNestedOneWithoutDiaDaSemanaInput
  }

  export type DiaDaSemanaUncheckedCreateInput = {
    turmaId?: number | null
    diaDaSemanaInt: number
    diaDaSemanaString: string
  }

  export type DiaDaSemanaUpdateInput = {
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
    Turma?: TurmaUpdateOneWithoutDiaDaSemanaNestedInput
  }

  export type DiaDaSemanaUncheckedUpdateInput = {
    turmaId?: NullableIntFieldUpdateOperationsInput | number | null
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }

  export type DiaDaSemanaCreateManyInput = {
    turmaId?: number | null
    diaDaSemanaInt: number
    diaDaSemanaString: string
  }

  export type DiaDaSemanaUpdateManyMutationInput = {
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }

  export type DiaDaSemanaUncheckedUpdateManyInput = {
    turmaId?: NullableIntFieldUpdateOperationsInput | number | null
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    senha?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    senha?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    senha?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EmprestimoInstrumentoListRelationFilter = {
    every?: EmprestimoInstrumentoWhereInput
    some?: EmprestimoInstrumentoWhereInput
    none?: EmprestimoInstrumentoWhereInput
  }

  export type EmprestimoInstrumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlunoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AlunoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlunoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AlunoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AlunoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type TiposDeInstrumentoListRelationFilter = {
    every?: TiposDeInstrumentoWhereInput
    some?: TiposDeInstrumentoWhereInput
    none?: TiposDeInstrumentoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TiposDeInstrumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoordenadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    salario?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoordenadorAvgOrderByAggregateInput = {
    id?: SortOrder
    salario?: SortOrder
  }

  export type CoordenadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    salario?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoordenadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    salario?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoordenadorSumOrderByAggregateInput = {
    id?: SortOrder
    salario?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type CoordenadorRelationFilter = {
    is?: CoordenadorWhereInput
    isNot?: CoordenadorWhereInput
  }

  export type CursoRelationFilter = {
    is?: CursoWhereInput
    isNot?: CursoWhereInput
  }

  export type TiposDeInstrumentoCountOrderByAggregateInput = {
    nomeInstrumento?: SortOrder
    coordenadorId?: SortOrder
    cursoId?: SortOrder
  }

  export type TiposDeInstrumentoAvgOrderByAggregateInput = {
    coordenadorId?: SortOrder
    cursoId?: SortOrder
  }

  export type TiposDeInstrumentoMaxOrderByAggregateInput = {
    nomeInstrumento?: SortOrder
    coordenadorId?: SortOrder
    cursoId?: SortOrder
  }

  export type TiposDeInstrumentoMinOrderByAggregateInput = {
    nomeInstrumento?: SortOrder
    coordenadorId?: SortOrder
    cursoId?: SortOrder
  }

  export type TiposDeInstrumentoSumOrderByAggregateInput = {
    coordenadorId?: SortOrder
    cursoId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type InstrumentoCountOrderByAggregateInput = {
    id?: SortOrder
    nomeInstrumento?: SortOrder
    marcaInstrumento?: SortOrder
    estadoConservacaoDoInstrumento?: SortOrder
    isEmprestado?: SortOrder
  }

  export type InstrumentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InstrumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeInstrumento?: SortOrder
    marcaInstrumento?: SortOrder
    estadoConservacaoDoInstrumento?: SortOrder
    isEmprestado?: SortOrder
  }

  export type InstrumentoMinOrderByAggregateInput = {
    id?: SortOrder
    nomeInstrumento?: SortOrder
    marcaInstrumento?: SortOrder
    estadoConservacaoDoInstrumento?: SortOrder
    isEmprestado?: SortOrder
  }

  export type InstrumentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type InstrumentoRelationFilter = {
    is?: InstrumentoWhereInput
    isNot?: InstrumentoWhereInput
  }

  export type AlunoRelationFilter = {
    is?: AlunoWhereInput
    isNot?: AlunoWhereInput
  }

  export type EmprestimoInstrumentoInstrumentoIdAlunoIdCompoundUniqueInput = {
    instrumentoId: number
    alunoId: number
  }

  export type EmprestimoInstrumentoCountOrderByAggregateInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
    dataInicialEmprestimo?: SortOrder
    dataFinalEmprestimo?: SortOrder
  }

  export type EmprestimoInstrumentoAvgOrderByAggregateInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
  }

  export type EmprestimoInstrumentoMaxOrderByAggregateInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
    dataInicialEmprestimo?: SortOrder
    dataFinalEmprestimo?: SortOrder
  }

  export type EmprestimoInstrumentoMinOrderByAggregateInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
    dataInicialEmprestimo?: SortOrder
    dataFinalEmprestimo?: SortOrder
  }

  export type EmprestimoInstrumentoSumOrderByAggregateInput = {
    instrumentoId?: SortOrder
    alunoId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CursoCountOrderByAggregateInput = {
    id?: SortOrder
    nomeCurso?: SortOrder
  }

  export type CursoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CursoMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeCurso?: SortOrder
  }

  export type CursoMinOrderByAggregateInput = {
    id?: SortOrder
    nomeCurso?: SortOrder
  }

  export type CursoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DiaDaSemanaListRelationFilter = {
    every?: DiaDaSemanaWhereInput
    some?: DiaDaSemanaWhereInput
    none?: DiaDaSemanaWhereInput
  }

  export type DiaDaSemanaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurmaCountOrderByAggregateInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
    isAtiva?: SortOrder
    horario?: SortOrder
  }

  export type TurmaAvgOrderByAggregateInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
  }

  export type TurmaMaxOrderByAggregateInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
    isAtiva?: SortOrder
    horario?: SortOrder
  }

  export type TurmaMinOrderByAggregateInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
    isAtiva?: SortOrder
    horario?: SortOrder
  }

  export type TurmaSumOrderByAggregateInput = {
    id?: SortOrder
    nroAlunos?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TurmaNullableRelationFilter = {
    is?: TurmaWhereInput | null
    isNot?: TurmaWhereInput | null
  }

  export type DiaDaSemanaCountOrderByAggregateInput = {
    turmaId?: SortOrder
    diaDaSemanaInt?: SortOrder
    diaDaSemanaString?: SortOrder
  }

  export type DiaDaSemanaAvgOrderByAggregateInput = {
    turmaId?: SortOrder
    diaDaSemanaInt?: SortOrder
  }

  export type DiaDaSemanaMaxOrderByAggregateInput = {
    turmaId?: SortOrder
    diaDaSemanaInt?: SortOrder
    diaDaSemanaString?: SortOrder
  }

  export type DiaDaSemanaMinOrderByAggregateInput = {
    turmaId?: SortOrder
    diaDaSemanaInt?: SortOrder
    diaDaSemanaString?: SortOrder
  }

  export type DiaDaSemanaSumOrderByAggregateInput = {
    turmaId?: SortOrder
    diaDaSemanaInt?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmprestimoInstrumentoCreateNestedManyWithoutAlunoInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput> | EmprestimoInstrumentoCreateWithoutAlunoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput | EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput[]
    createMany?: EmprestimoInstrumentoCreateManyAlunoInputEnvelope
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
  }

  export type EmprestimoInstrumentoUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput> | EmprestimoInstrumentoCreateWithoutAlunoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput | EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput[]
    createMany?: EmprestimoInstrumentoCreateManyAlunoInputEnvelope
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
  }

  export type EmprestimoInstrumentoUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput> | EmprestimoInstrumentoCreateWithoutAlunoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput | EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput[]
    upsert?: EmprestimoInstrumentoUpsertWithWhereUniqueWithoutAlunoInput | EmprestimoInstrumentoUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: EmprestimoInstrumentoCreateManyAlunoInputEnvelope
    set?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    disconnect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    delete?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    update?: EmprestimoInstrumentoUpdateWithWhereUniqueWithoutAlunoInput | EmprestimoInstrumentoUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: EmprestimoInstrumentoUpdateManyWithWhereWithoutAlunoInput | EmprestimoInstrumentoUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmprestimoInstrumentoUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput> | EmprestimoInstrumentoCreateWithoutAlunoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput | EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput[]
    upsert?: EmprestimoInstrumentoUpsertWithWhereUniqueWithoutAlunoInput | EmprestimoInstrumentoUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: EmprestimoInstrumentoCreateManyAlunoInputEnvelope
    set?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    disconnect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    delete?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    update?: EmprestimoInstrumentoUpdateWithWhereUniqueWithoutAlunoInput | EmprestimoInstrumentoUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: EmprestimoInstrumentoUpdateManyWithWhereWithoutAlunoInput | EmprestimoInstrumentoUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
  }

  export type TiposDeInstrumentoCreateNestedManyWithoutCoordenadorInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput> | TiposDeInstrumentoCreateWithoutCoordenadorInput[] | TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput | TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput[]
    createMany?: TiposDeInstrumentoCreateManyCoordenadorInputEnvelope
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
  }

  export type TiposDeInstrumentoUncheckedCreateNestedManyWithoutCoordenadorInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput> | TiposDeInstrumentoCreateWithoutCoordenadorInput[] | TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput | TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput[]
    createMany?: TiposDeInstrumentoCreateManyCoordenadorInputEnvelope
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TiposDeInstrumentoUpdateManyWithoutCoordenadorNestedInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput> | TiposDeInstrumentoCreateWithoutCoordenadorInput[] | TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput | TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput[]
    upsert?: TiposDeInstrumentoUpsertWithWhereUniqueWithoutCoordenadorInput | TiposDeInstrumentoUpsertWithWhereUniqueWithoutCoordenadorInput[]
    createMany?: TiposDeInstrumentoCreateManyCoordenadorInputEnvelope
    set?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    disconnect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    delete?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    update?: TiposDeInstrumentoUpdateWithWhereUniqueWithoutCoordenadorInput | TiposDeInstrumentoUpdateWithWhereUniqueWithoutCoordenadorInput[]
    updateMany?: TiposDeInstrumentoUpdateManyWithWhereWithoutCoordenadorInput | TiposDeInstrumentoUpdateManyWithWhereWithoutCoordenadorInput[]
    deleteMany?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
  }

  export type TiposDeInstrumentoUncheckedUpdateManyWithoutCoordenadorNestedInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput> | TiposDeInstrumentoCreateWithoutCoordenadorInput[] | TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput | TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput[]
    upsert?: TiposDeInstrumentoUpsertWithWhereUniqueWithoutCoordenadorInput | TiposDeInstrumentoUpsertWithWhereUniqueWithoutCoordenadorInput[]
    createMany?: TiposDeInstrumentoCreateManyCoordenadorInputEnvelope
    set?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    disconnect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    delete?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    update?: TiposDeInstrumentoUpdateWithWhereUniqueWithoutCoordenadorInput | TiposDeInstrumentoUpdateWithWhereUniqueWithoutCoordenadorInput[]
    updateMany?: TiposDeInstrumentoUpdateManyWithWhereWithoutCoordenadorInput | TiposDeInstrumentoUpdateManyWithWhereWithoutCoordenadorInput[]
    deleteMany?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
  }

  export type CoordenadorCreateNestedOneWithoutInstrumentosLecionaInput = {
    create?: XOR<CoordenadorCreateWithoutInstrumentosLecionaInput, CoordenadorUncheckedCreateWithoutInstrumentosLecionaInput>
    connectOrCreate?: CoordenadorCreateOrConnectWithoutInstrumentosLecionaInput
    connect?: CoordenadorWhereUniqueInput
  }

  export type CursoCreateNestedOneWithoutInstrumentosCursoInput = {
    create?: XOR<CursoCreateWithoutInstrumentosCursoInput, CursoUncheckedCreateWithoutInstrumentosCursoInput>
    connectOrCreate?: CursoCreateOrConnectWithoutInstrumentosCursoInput
    connect?: CursoWhereUniqueInput
  }

  export type CoordenadorUpdateOneRequiredWithoutInstrumentosLecionaNestedInput = {
    create?: XOR<CoordenadorCreateWithoutInstrumentosLecionaInput, CoordenadorUncheckedCreateWithoutInstrumentosLecionaInput>
    connectOrCreate?: CoordenadorCreateOrConnectWithoutInstrumentosLecionaInput
    upsert?: CoordenadorUpsertWithoutInstrumentosLecionaInput
    connect?: CoordenadorWhereUniqueInput
    update?: XOR<XOR<CoordenadorUpdateToOneWithWhereWithoutInstrumentosLecionaInput, CoordenadorUpdateWithoutInstrumentosLecionaInput>, CoordenadorUncheckedUpdateWithoutInstrumentosLecionaInput>
  }

  export type CursoUpdateOneRequiredWithoutInstrumentosCursoNestedInput = {
    create?: XOR<CursoCreateWithoutInstrumentosCursoInput, CursoUncheckedCreateWithoutInstrumentosCursoInput>
    connectOrCreate?: CursoCreateOrConnectWithoutInstrumentosCursoInput
    upsert?: CursoUpsertWithoutInstrumentosCursoInput
    connect?: CursoWhereUniqueInput
    update?: XOR<XOR<CursoUpdateToOneWithWhereWithoutInstrumentosCursoInput, CursoUpdateWithoutInstrumentosCursoInput>, CursoUncheckedUpdateWithoutInstrumentosCursoInput>
  }

  export type EmprestimoInstrumentoCreateNestedManyWithoutInstrumentoInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput> | EmprestimoInstrumentoCreateWithoutInstrumentoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput | EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput[]
    createMany?: EmprestimoInstrumentoCreateManyInstrumentoInputEnvelope
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
  }

  export type EmprestimoInstrumentoUncheckedCreateNestedManyWithoutInstrumentoInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput> | EmprestimoInstrumentoCreateWithoutInstrumentoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput | EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput[]
    createMany?: EmprestimoInstrumentoCreateManyInstrumentoInputEnvelope
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EmprestimoInstrumentoUpdateManyWithoutInstrumentoNestedInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput> | EmprestimoInstrumentoCreateWithoutInstrumentoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput | EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput[]
    upsert?: EmprestimoInstrumentoUpsertWithWhereUniqueWithoutInstrumentoInput | EmprestimoInstrumentoUpsertWithWhereUniqueWithoutInstrumentoInput[]
    createMany?: EmprestimoInstrumentoCreateManyInstrumentoInputEnvelope
    set?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    disconnect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    delete?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    update?: EmprestimoInstrumentoUpdateWithWhereUniqueWithoutInstrumentoInput | EmprestimoInstrumentoUpdateWithWhereUniqueWithoutInstrumentoInput[]
    updateMany?: EmprestimoInstrumentoUpdateManyWithWhereWithoutInstrumentoInput | EmprestimoInstrumentoUpdateManyWithWhereWithoutInstrumentoInput[]
    deleteMany?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
  }

  export type EmprestimoInstrumentoUncheckedUpdateManyWithoutInstrumentoNestedInput = {
    create?: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput> | EmprestimoInstrumentoCreateWithoutInstrumentoInput[] | EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput[]
    connectOrCreate?: EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput | EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput[]
    upsert?: EmprestimoInstrumentoUpsertWithWhereUniqueWithoutInstrumentoInput | EmprestimoInstrumentoUpsertWithWhereUniqueWithoutInstrumentoInput[]
    createMany?: EmprestimoInstrumentoCreateManyInstrumentoInputEnvelope
    set?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    disconnect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    delete?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    connect?: EmprestimoInstrumentoWhereUniqueInput | EmprestimoInstrumentoWhereUniqueInput[]
    update?: EmprestimoInstrumentoUpdateWithWhereUniqueWithoutInstrumentoInput | EmprestimoInstrumentoUpdateWithWhereUniqueWithoutInstrumentoInput[]
    updateMany?: EmprestimoInstrumentoUpdateManyWithWhereWithoutInstrumentoInput | EmprestimoInstrumentoUpdateManyWithWhereWithoutInstrumentoInput[]
    deleteMany?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
  }

  export type InstrumentoCreateNestedOneWithoutAlunosEmprestimoInput = {
    create?: XOR<InstrumentoCreateWithoutAlunosEmprestimoInput, InstrumentoUncheckedCreateWithoutAlunosEmprestimoInput>
    connectOrCreate?: InstrumentoCreateOrConnectWithoutAlunosEmprestimoInput
    connect?: InstrumentoWhereUniqueInput
  }

  export type AlunoCreateNestedOneWithoutInstrumentoEmprestimoInput = {
    create?: XOR<AlunoCreateWithoutInstrumentoEmprestimoInput, AlunoUncheckedCreateWithoutInstrumentoEmprestimoInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutInstrumentoEmprestimoInput
    connect?: AlunoWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type InstrumentoUpdateOneRequiredWithoutAlunosEmprestimoNestedInput = {
    create?: XOR<InstrumentoCreateWithoutAlunosEmprestimoInput, InstrumentoUncheckedCreateWithoutAlunosEmprestimoInput>
    connectOrCreate?: InstrumentoCreateOrConnectWithoutAlunosEmprestimoInput
    upsert?: InstrumentoUpsertWithoutAlunosEmprestimoInput
    connect?: InstrumentoWhereUniqueInput
    update?: XOR<XOR<InstrumentoUpdateToOneWithWhereWithoutAlunosEmprestimoInput, InstrumentoUpdateWithoutAlunosEmprestimoInput>, InstrumentoUncheckedUpdateWithoutAlunosEmprestimoInput>
  }

  export type AlunoUpdateOneRequiredWithoutInstrumentoEmprestimoNestedInput = {
    create?: XOR<AlunoCreateWithoutInstrumentoEmprestimoInput, AlunoUncheckedCreateWithoutInstrumentoEmprestimoInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutInstrumentoEmprestimoInput
    upsert?: AlunoUpsertWithoutInstrumentoEmprestimoInput
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutInstrumentoEmprestimoInput, AlunoUpdateWithoutInstrumentoEmprestimoInput>, AlunoUncheckedUpdateWithoutInstrumentoEmprestimoInput>
  }

  export type TiposDeInstrumentoCreateNestedManyWithoutCursoInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput> | TiposDeInstrumentoCreateWithoutCursoInput[] | TiposDeInstrumentoUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCursoInput | TiposDeInstrumentoCreateOrConnectWithoutCursoInput[]
    createMany?: TiposDeInstrumentoCreateManyCursoInputEnvelope
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
  }

  export type TiposDeInstrumentoUncheckedCreateNestedManyWithoutCursoInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput> | TiposDeInstrumentoCreateWithoutCursoInput[] | TiposDeInstrumentoUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCursoInput | TiposDeInstrumentoCreateOrConnectWithoutCursoInput[]
    createMany?: TiposDeInstrumentoCreateManyCursoInputEnvelope
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
  }

  export type TiposDeInstrumentoUpdateManyWithoutCursoNestedInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput> | TiposDeInstrumentoCreateWithoutCursoInput[] | TiposDeInstrumentoUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCursoInput | TiposDeInstrumentoCreateOrConnectWithoutCursoInput[]
    upsert?: TiposDeInstrumentoUpsertWithWhereUniqueWithoutCursoInput | TiposDeInstrumentoUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: TiposDeInstrumentoCreateManyCursoInputEnvelope
    set?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    disconnect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    delete?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    update?: TiposDeInstrumentoUpdateWithWhereUniqueWithoutCursoInput | TiposDeInstrumentoUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: TiposDeInstrumentoUpdateManyWithWhereWithoutCursoInput | TiposDeInstrumentoUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
  }

  export type TiposDeInstrumentoUncheckedUpdateManyWithoutCursoNestedInput = {
    create?: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput> | TiposDeInstrumentoCreateWithoutCursoInput[] | TiposDeInstrumentoUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TiposDeInstrumentoCreateOrConnectWithoutCursoInput | TiposDeInstrumentoCreateOrConnectWithoutCursoInput[]
    upsert?: TiposDeInstrumentoUpsertWithWhereUniqueWithoutCursoInput | TiposDeInstrumentoUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: TiposDeInstrumentoCreateManyCursoInputEnvelope
    set?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    disconnect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    delete?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    connect?: TiposDeInstrumentoWhereUniqueInput | TiposDeInstrumentoWhereUniqueInput[]
    update?: TiposDeInstrumentoUpdateWithWhereUniqueWithoutCursoInput | TiposDeInstrumentoUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: TiposDeInstrumentoUpdateManyWithWhereWithoutCursoInput | TiposDeInstrumentoUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
  }

  export type DiaDaSemanaCreateNestedManyWithoutTurmaInput = {
    create?: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput> | DiaDaSemanaCreateWithoutTurmaInput[] | DiaDaSemanaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: DiaDaSemanaCreateOrConnectWithoutTurmaInput | DiaDaSemanaCreateOrConnectWithoutTurmaInput[]
    createMany?: DiaDaSemanaCreateManyTurmaInputEnvelope
    connect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
  }

  export type DiaDaSemanaUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput> | DiaDaSemanaCreateWithoutTurmaInput[] | DiaDaSemanaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: DiaDaSemanaCreateOrConnectWithoutTurmaInput | DiaDaSemanaCreateOrConnectWithoutTurmaInput[]
    createMany?: DiaDaSemanaCreateManyTurmaInputEnvelope
    connect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
  }

  export type DiaDaSemanaUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput> | DiaDaSemanaCreateWithoutTurmaInput[] | DiaDaSemanaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: DiaDaSemanaCreateOrConnectWithoutTurmaInput | DiaDaSemanaCreateOrConnectWithoutTurmaInput[]
    upsert?: DiaDaSemanaUpsertWithWhereUniqueWithoutTurmaInput | DiaDaSemanaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: DiaDaSemanaCreateManyTurmaInputEnvelope
    set?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    disconnect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    delete?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    connect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    update?: DiaDaSemanaUpdateWithWhereUniqueWithoutTurmaInput | DiaDaSemanaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: DiaDaSemanaUpdateManyWithWhereWithoutTurmaInput | DiaDaSemanaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: DiaDaSemanaScalarWhereInput | DiaDaSemanaScalarWhereInput[]
  }

  export type DiaDaSemanaUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput> | DiaDaSemanaCreateWithoutTurmaInput[] | DiaDaSemanaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: DiaDaSemanaCreateOrConnectWithoutTurmaInput | DiaDaSemanaCreateOrConnectWithoutTurmaInput[]
    upsert?: DiaDaSemanaUpsertWithWhereUniqueWithoutTurmaInput | DiaDaSemanaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: DiaDaSemanaCreateManyTurmaInputEnvelope
    set?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    disconnect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    delete?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    connect?: DiaDaSemanaWhereUniqueInput | DiaDaSemanaWhereUniqueInput[]
    update?: DiaDaSemanaUpdateWithWhereUniqueWithoutTurmaInput | DiaDaSemanaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: DiaDaSemanaUpdateManyWithWhereWithoutTurmaInput | DiaDaSemanaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: DiaDaSemanaScalarWhereInput | DiaDaSemanaScalarWhereInput[]
  }

  export type TurmaCreateNestedOneWithoutDiaDaSemanaInput = {
    create?: XOR<TurmaCreateWithoutDiaDaSemanaInput, TurmaUncheckedCreateWithoutDiaDaSemanaInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutDiaDaSemanaInput
    connect?: TurmaWhereUniqueInput
  }

  export type TurmaUpdateOneWithoutDiaDaSemanaNestedInput = {
    create?: XOR<TurmaCreateWithoutDiaDaSemanaInput, TurmaUncheckedCreateWithoutDiaDaSemanaInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutDiaDaSemanaInput
    upsert?: TurmaUpsertWithoutDiaDaSemanaInput
    disconnect?: TurmaWhereInput | boolean
    delete?: TurmaWhereInput | boolean
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutDiaDaSemanaInput, TurmaUpdateWithoutDiaDaSemanaInput>, TurmaUncheckedUpdateWithoutDiaDaSemanaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EmprestimoInstrumentoCreateWithoutAlunoInput = {
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
    instrumento: InstrumentoCreateNestedOneWithoutAlunosEmprestimoInput
  }

  export type EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput = {
    instrumentoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoCreateOrConnectWithoutAlunoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    create: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput>
  }

  export type EmprestimoInstrumentoCreateManyAlunoInputEnvelope = {
    data: EmprestimoInstrumentoCreateManyAlunoInput | EmprestimoInstrumentoCreateManyAlunoInput[]
    skipDuplicates?: boolean
  }

  export type EmprestimoInstrumentoUpsertWithWhereUniqueWithoutAlunoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    update: XOR<EmprestimoInstrumentoUpdateWithoutAlunoInput, EmprestimoInstrumentoUncheckedUpdateWithoutAlunoInput>
    create: XOR<EmprestimoInstrumentoCreateWithoutAlunoInput, EmprestimoInstrumentoUncheckedCreateWithoutAlunoInput>
  }

  export type EmprestimoInstrumentoUpdateWithWhereUniqueWithoutAlunoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    data: XOR<EmprestimoInstrumentoUpdateWithoutAlunoInput, EmprestimoInstrumentoUncheckedUpdateWithoutAlunoInput>
  }

  export type EmprestimoInstrumentoUpdateManyWithWhereWithoutAlunoInput = {
    where: EmprestimoInstrumentoScalarWhereInput
    data: XOR<EmprestimoInstrumentoUpdateManyMutationInput, EmprestimoInstrumentoUncheckedUpdateManyWithoutAlunoInput>
  }

  export type EmprestimoInstrumentoScalarWhereInput = {
    AND?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
    OR?: EmprestimoInstrumentoScalarWhereInput[]
    NOT?: EmprestimoInstrumentoScalarWhereInput | EmprestimoInstrumentoScalarWhereInput[]
    instrumentoId?: IntFilter<"EmprestimoInstrumento"> | number
    alunoId?: IntFilter<"EmprestimoInstrumento"> | number
    dataInicialEmprestimo?: DateTimeFilter<"EmprestimoInstrumento"> | Date | string
    dataFinalEmprestimo?: DateTimeNullableFilter<"EmprestimoInstrumento"> | Date | string | null
  }

  export type TiposDeInstrumentoCreateWithoutCoordenadorInput = {
    nomeInstrumento: string
    curso: CursoCreateNestedOneWithoutInstrumentosCursoInput
  }

  export type TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput = {
    nomeInstrumento: string
    cursoId: number
  }

  export type TiposDeInstrumentoCreateOrConnectWithoutCoordenadorInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    create: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput>
  }

  export type TiposDeInstrumentoCreateManyCoordenadorInputEnvelope = {
    data: TiposDeInstrumentoCreateManyCoordenadorInput | TiposDeInstrumentoCreateManyCoordenadorInput[]
    skipDuplicates?: boolean
  }

  export type TiposDeInstrumentoUpsertWithWhereUniqueWithoutCoordenadorInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    update: XOR<TiposDeInstrumentoUpdateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedUpdateWithoutCoordenadorInput>
    create: XOR<TiposDeInstrumentoCreateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedCreateWithoutCoordenadorInput>
  }

  export type TiposDeInstrumentoUpdateWithWhereUniqueWithoutCoordenadorInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    data: XOR<TiposDeInstrumentoUpdateWithoutCoordenadorInput, TiposDeInstrumentoUncheckedUpdateWithoutCoordenadorInput>
  }

  export type TiposDeInstrumentoUpdateManyWithWhereWithoutCoordenadorInput = {
    where: TiposDeInstrumentoScalarWhereInput
    data: XOR<TiposDeInstrumentoUpdateManyMutationInput, TiposDeInstrumentoUncheckedUpdateManyWithoutCoordenadorInput>
  }

  export type TiposDeInstrumentoScalarWhereInput = {
    AND?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
    OR?: TiposDeInstrumentoScalarWhereInput[]
    NOT?: TiposDeInstrumentoScalarWhereInput | TiposDeInstrumentoScalarWhereInput[]
    nomeInstrumento?: StringFilter<"TiposDeInstrumento"> | string
    coordenadorId?: IntFilter<"TiposDeInstrumento"> | number
    cursoId?: IntFilter<"TiposDeInstrumento"> | number
  }

  export type CoordenadorCreateWithoutInstrumentosLecionaInput = {
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    salario?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CoordenadorUncheckedCreateWithoutInstrumentosLecionaInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    salario?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CoordenadorCreateOrConnectWithoutInstrumentosLecionaInput = {
    where: CoordenadorWhereUniqueInput
    create: XOR<CoordenadorCreateWithoutInstrumentosLecionaInput, CoordenadorUncheckedCreateWithoutInstrumentosLecionaInput>
  }

  export type CursoCreateWithoutInstrumentosCursoInput = {
    nomeCurso: string
  }

  export type CursoUncheckedCreateWithoutInstrumentosCursoInput = {
    id?: number
    nomeCurso: string
  }

  export type CursoCreateOrConnectWithoutInstrumentosCursoInput = {
    where: CursoWhereUniqueInput
    create: XOR<CursoCreateWithoutInstrumentosCursoInput, CursoUncheckedCreateWithoutInstrumentosCursoInput>
  }

  export type CoordenadorUpsertWithoutInstrumentosLecionaInput = {
    update: XOR<CoordenadorUpdateWithoutInstrumentosLecionaInput, CoordenadorUncheckedUpdateWithoutInstrumentosLecionaInput>
    create: XOR<CoordenadorCreateWithoutInstrumentosLecionaInput, CoordenadorUncheckedCreateWithoutInstrumentosLecionaInput>
    where?: CoordenadorWhereInput
  }

  export type CoordenadorUpdateToOneWithWhereWithoutInstrumentosLecionaInput = {
    where?: CoordenadorWhereInput
    data: XOR<CoordenadorUpdateWithoutInstrumentosLecionaInput, CoordenadorUncheckedUpdateWithoutInstrumentosLecionaInput>
  }

  export type CoordenadorUpdateWithoutInstrumentosLecionaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoordenadorUncheckedUpdateWithoutInstrumentosLecionaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CursoUpsertWithoutInstrumentosCursoInput = {
    update: XOR<CursoUpdateWithoutInstrumentosCursoInput, CursoUncheckedUpdateWithoutInstrumentosCursoInput>
    create: XOR<CursoCreateWithoutInstrumentosCursoInput, CursoUncheckedCreateWithoutInstrumentosCursoInput>
    where?: CursoWhereInput
  }

  export type CursoUpdateToOneWithWhereWithoutInstrumentosCursoInput = {
    where?: CursoWhereInput
    data: XOR<CursoUpdateWithoutInstrumentosCursoInput, CursoUncheckedUpdateWithoutInstrumentosCursoInput>
  }

  export type CursoUpdateWithoutInstrumentosCursoInput = {
    nomeCurso?: StringFieldUpdateOperationsInput | string
  }

  export type CursoUncheckedUpdateWithoutInstrumentosCursoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCurso?: StringFieldUpdateOperationsInput | string
  }

  export type EmprestimoInstrumentoCreateWithoutInstrumentoInput = {
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
    aluno: AlunoCreateNestedOneWithoutInstrumentoEmprestimoInput
  }

  export type EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput = {
    alunoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoCreateOrConnectWithoutInstrumentoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    create: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput>
  }

  export type EmprestimoInstrumentoCreateManyInstrumentoInputEnvelope = {
    data: EmprestimoInstrumentoCreateManyInstrumentoInput | EmprestimoInstrumentoCreateManyInstrumentoInput[]
    skipDuplicates?: boolean
  }

  export type EmprestimoInstrumentoUpsertWithWhereUniqueWithoutInstrumentoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    update: XOR<EmprestimoInstrumentoUpdateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedUpdateWithoutInstrumentoInput>
    create: XOR<EmprestimoInstrumentoCreateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedCreateWithoutInstrumentoInput>
  }

  export type EmprestimoInstrumentoUpdateWithWhereUniqueWithoutInstrumentoInput = {
    where: EmprestimoInstrumentoWhereUniqueInput
    data: XOR<EmprestimoInstrumentoUpdateWithoutInstrumentoInput, EmprestimoInstrumentoUncheckedUpdateWithoutInstrumentoInput>
  }

  export type EmprestimoInstrumentoUpdateManyWithWhereWithoutInstrumentoInput = {
    where: EmprestimoInstrumentoScalarWhereInput
    data: XOR<EmprestimoInstrumentoUpdateManyMutationInput, EmprestimoInstrumentoUncheckedUpdateManyWithoutInstrumentoInput>
  }

  export type InstrumentoCreateWithoutAlunosEmprestimoInput = {
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
  }

  export type InstrumentoUncheckedCreateWithoutAlunosEmprestimoInput = {
    id?: number
    nomeInstrumento: string
    marcaInstrumento: string
    estadoConservacaoDoInstrumento: string
    isEmprestado: boolean
  }

  export type InstrumentoCreateOrConnectWithoutAlunosEmprestimoInput = {
    where: InstrumentoWhereUniqueInput
    create: XOR<InstrumentoCreateWithoutAlunosEmprestimoInput, InstrumentoUncheckedCreateWithoutAlunosEmprestimoInput>
  }

  export type AlunoCreateWithoutInstrumentoEmprestimoInput = {
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AlunoUncheckedCreateWithoutInstrumentoEmprestimoInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    dataNascimento: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AlunoCreateOrConnectWithoutInstrumentoEmprestimoInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutInstrumentoEmprestimoInput, AlunoUncheckedCreateWithoutInstrumentoEmprestimoInput>
  }

  export type InstrumentoUpsertWithoutAlunosEmprestimoInput = {
    update: XOR<InstrumentoUpdateWithoutAlunosEmprestimoInput, InstrumentoUncheckedUpdateWithoutAlunosEmprestimoInput>
    create: XOR<InstrumentoCreateWithoutAlunosEmprestimoInput, InstrumentoUncheckedCreateWithoutAlunosEmprestimoInput>
    where?: InstrumentoWhereInput
  }

  export type InstrumentoUpdateToOneWithWhereWithoutAlunosEmprestimoInput = {
    where?: InstrumentoWhereInput
    data: XOR<InstrumentoUpdateWithoutAlunosEmprestimoInput, InstrumentoUncheckedUpdateWithoutAlunosEmprestimoInput>
  }

  export type InstrumentoUpdateWithoutAlunosEmprestimoInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstrumentoUncheckedUpdateWithoutAlunosEmprestimoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    marcaInstrumento?: StringFieldUpdateOperationsInput | string
    estadoConservacaoDoInstrumento?: StringFieldUpdateOperationsInput | string
    isEmprestado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlunoUpsertWithoutInstrumentoEmprestimoInput = {
    update: XOR<AlunoUpdateWithoutInstrumentoEmprestimoInput, AlunoUncheckedUpdateWithoutInstrumentoEmprestimoInput>
    create: XOR<AlunoCreateWithoutInstrumentoEmprestimoInput, AlunoUncheckedCreateWithoutInstrumentoEmprestimoInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutInstrumentoEmprestimoInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutInstrumentoEmprestimoInput, AlunoUncheckedUpdateWithoutInstrumentoEmprestimoInput>
  }

  export type AlunoUpdateWithoutInstrumentoEmprestimoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoUncheckedUpdateWithoutInstrumentoEmprestimoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TiposDeInstrumentoCreateWithoutCursoInput = {
    nomeInstrumento: string
    coordenador: CoordenadorCreateNestedOneWithoutInstrumentosLecionaInput
  }

  export type TiposDeInstrumentoUncheckedCreateWithoutCursoInput = {
    nomeInstrumento: string
    coordenadorId: number
  }

  export type TiposDeInstrumentoCreateOrConnectWithoutCursoInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    create: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput>
  }

  export type TiposDeInstrumentoCreateManyCursoInputEnvelope = {
    data: TiposDeInstrumentoCreateManyCursoInput | TiposDeInstrumentoCreateManyCursoInput[]
    skipDuplicates?: boolean
  }

  export type TiposDeInstrumentoUpsertWithWhereUniqueWithoutCursoInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    update: XOR<TiposDeInstrumentoUpdateWithoutCursoInput, TiposDeInstrumentoUncheckedUpdateWithoutCursoInput>
    create: XOR<TiposDeInstrumentoCreateWithoutCursoInput, TiposDeInstrumentoUncheckedCreateWithoutCursoInput>
  }

  export type TiposDeInstrumentoUpdateWithWhereUniqueWithoutCursoInput = {
    where: TiposDeInstrumentoWhereUniqueInput
    data: XOR<TiposDeInstrumentoUpdateWithoutCursoInput, TiposDeInstrumentoUncheckedUpdateWithoutCursoInput>
  }

  export type TiposDeInstrumentoUpdateManyWithWhereWithoutCursoInput = {
    where: TiposDeInstrumentoScalarWhereInput
    data: XOR<TiposDeInstrumentoUpdateManyMutationInput, TiposDeInstrumentoUncheckedUpdateManyWithoutCursoInput>
  }

  export type DiaDaSemanaCreateWithoutTurmaInput = {
    diaDaSemanaInt: number
    diaDaSemanaString: string
  }

  export type DiaDaSemanaUncheckedCreateWithoutTurmaInput = {
    diaDaSemanaInt: number
    diaDaSemanaString: string
  }

  export type DiaDaSemanaCreateOrConnectWithoutTurmaInput = {
    where: DiaDaSemanaWhereUniqueInput
    create: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput>
  }

  export type DiaDaSemanaCreateManyTurmaInputEnvelope = {
    data: DiaDaSemanaCreateManyTurmaInput | DiaDaSemanaCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type DiaDaSemanaUpsertWithWhereUniqueWithoutTurmaInput = {
    where: DiaDaSemanaWhereUniqueInput
    update: XOR<DiaDaSemanaUpdateWithoutTurmaInput, DiaDaSemanaUncheckedUpdateWithoutTurmaInput>
    create: XOR<DiaDaSemanaCreateWithoutTurmaInput, DiaDaSemanaUncheckedCreateWithoutTurmaInput>
  }

  export type DiaDaSemanaUpdateWithWhereUniqueWithoutTurmaInput = {
    where: DiaDaSemanaWhereUniqueInput
    data: XOR<DiaDaSemanaUpdateWithoutTurmaInput, DiaDaSemanaUncheckedUpdateWithoutTurmaInput>
  }

  export type DiaDaSemanaUpdateManyWithWhereWithoutTurmaInput = {
    where: DiaDaSemanaScalarWhereInput
    data: XOR<DiaDaSemanaUpdateManyMutationInput, DiaDaSemanaUncheckedUpdateManyWithoutTurmaInput>
  }

  export type DiaDaSemanaScalarWhereInput = {
    AND?: DiaDaSemanaScalarWhereInput | DiaDaSemanaScalarWhereInput[]
    OR?: DiaDaSemanaScalarWhereInput[]
    NOT?: DiaDaSemanaScalarWhereInput | DiaDaSemanaScalarWhereInput[]
    turmaId?: IntNullableFilter<"DiaDaSemana"> | number | null
    diaDaSemanaInt?: IntFilter<"DiaDaSemana"> | number
    diaDaSemanaString?: StringFilter<"DiaDaSemana"> | string
  }

  export type TurmaCreateWithoutDiaDaSemanaInput = {
    nroAlunos: number
    isAtiva: boolean
    horario: string
  }

  export type TurmaUncheckedCreateWithoutDiaDaSemanaInput = {
    id?: number
    nroAlunos: number
    isAtiva: boolean
    horario: string
  }

  export type TurmaCreateOrConnectWithoutDiaDaSemanaInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutDiaDaSemanaInput, TurmaUncheckedCreateWithoutDiaDaSemanaInput>
  }

  export type TurmaUpsertWithoutDiaDaSemanaInput = {
    update: XOR<TurmaUpdateWithoutDiaDaSemanaInput, TurmaUncheckedUpdateWithoutDiaDaSemanaInput>
    create: XOR<TurmaCreateWithoutDiaDaSemanaInput, TurmaUncheckedCreateWithoutDiaDaSemanaInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutDiaDaSemanaInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutDiaDaSemanaInput, TurmaUncheckedUpdateWithoutDiaDaSemanaInput>
  }

  export type TurmaUpdateWithoutDiaDaSemanaInput = {
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaUncheckedUpdateWithoutDiaDaSemanaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nroAlunos?: IntFieldUpdateOperationsInput | number
    isAtiva?: BoolFieldUpdateOperationsInput | boolean
    horario?: StringFieldUpdateOperationsInput | string
  }

  export type EmprestimoInstrumentoCreateManyAlunoInput = {
    instrumentoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoUpdateWithoutAlunoInput = {
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instrumento?: InstrumentoUpdateOneRequiredWithoutAlunosEmprestimoNestedInput
  }

  export type EmprestimoInstrumentoUncheckedUpdateWithoutAlunoInput = {
    instrumentoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmprestimoInstrumentoUncheckedUpdateManyWithoutAlunoInput = {
    instrumentoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TiposDeInstrumentoCreateManyCoordenadorInput = {
    nomeInstrumento: string
    cursoId: number
  }

  export type TiposDeInstrumentoUpdateWithoutCoordenadorInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    curso?: CursoUpdateOneRequiredWithoutInstrumentosCursoNestedInput
  }

  export type TiposDeInstrumentoUncheckedUpdateWithoutCoordenadorInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    cursoId?: IntFieldUpdateOperationsInput | number
  }

  export type TiposDeInstrumentoUncheckedUpdateManyWithoutCoordenadorInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    cursoId?: IntFieldUpdateOperationsInput | number
  }

  export type EmprestimoInstrumentoCreateManyInstrumentoInput = {
    alunoId: number
    dataInicialEmprestimo?: Date | string
    dataFinalEmprestimo?: Date | string | null
  }

  export type EmprestimoInstrumentoUpdateWithoutInstrumentoInput = {
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aluno?: AlunoUpdateOneRequiredWithoutInstrumentoEmprestimoNestedInput
  }

  export type EmprestimoInstrumentoUncheckedUpdateWithoutInstrumentoInput = {
    alunoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmprestimoInstrumentoUncheckedUpdateManyWithoutInstrumentoInput = {
    alunoId?: IntFieldUpdateOperationsInput | number
    dataInicialEmprestimo?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFinalEmprestimo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TiposDeInstrumentoCreateManyCursoInput = {
    nomeInstrumento: string
    coordenadorId: number
  }

  export type TiposDeInstrumentoUpdateWithoutCursoInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenador?: CoordenadorUpdateOneRequiredWithoutInstrumentosLecionaNestedInput
  }

  export type TiposDeInstrumentoUncheckedUpdateWithoutCursoInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenadorId?: IntFieldUpdateOperationsInput | number
  }

  export type TiposDeInstrumentoUncheckedUpdateManyWithoutCursoInput = {
    nomeInstrumento?: StringFieldUpdateOperationsInput | string
    coordenadorId?: IntFieldUpdateOperationsInput | number
  }

  export type DiaDaSemanaCreateManyTurmaInput = {
    diaDaSemanaInt: number
    diaDaSemanaString: string
  }

  export type DiaDaSemanaUpdateWithoutTurmaInput = {
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }

  export type DiaDaSemanaUncheckedUpdateWithoutTurmaInput = {
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }

  export type DiaDaSemanaUncheckedUpdateManyWithoutTurmaInput = {
    diaDaSemanaInt?: IntFieldUpdateOperationsInput | number
    diaDaSemanaString?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AlunoCountOutputTypeDefaultArgs instead
     */
    export type AlunoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AlunoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordenadorCountOutputTypeDefaultArgs instead
     */
    export type CoordenadorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CoordenadorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstrumentoCountOutputTypeDefaultArgs instead
     */
    export type InstrumentoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstrumentoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoCountOutputTypeDefaultArgs instead
     */
    export type CursoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CursoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaCountOutputTypeDefaultArgs instead
     */
    export type TurmaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TurmaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlunoDefaultArgs instead
     */
    export type AlunoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AlunoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordenadorDefaultArgs instead
     */
    export type CoordenadorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CoordenadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TiposDeInstrumentoDefaultArgs instead
     */
    export type TiposDeInstrumentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TiposDeInstrumentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstrumentoDefaultArgs instead
     */
    export type InstrumentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstrumentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmprestimoInstrumentoDefaultArgs instead
     */
    export type EmprestimoInstrumentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EmprestimoInstrumentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoDefaultArgs instead
     */
    export type CursoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CursoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaDefaultArgs instead
     */
    export type TurmaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TurmaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiaDaSemanaDefaultArgs instead
     */
    export type DiaDaSemanaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DiaDaSemanaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}